<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://code.kpman.cc/</id>
    <title>kpman | code</title>
    <updated>2021-05-25T10:17:48.498Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <author>
        <name>Daniel Tseng</name>
        <email>s92f002@gmail.com</email>
        <uri>https://code.kpman.cc</uri>
    </author>
    <link rel="alternate" href="https://code.kpman.cc"/>
    <link rel="self" href="https://code.kpman.cc/atom.xml"/>
    <subtitle>記錄開發過程大小事</subtitle>
    <logo>https://code.kpman.cc/android-chrome-192x192.png</logo>
    <icon>https://code.kpman.cc/favicon.ico</icon>
    <rights>© 2021 kpman | code. All rights reserved.</rights>
    <entry>
        <title type="html"><![CDATA[為 Next.js 靜態網站產生 RSS feed]]></title>
        <id>https://code.kpman.cc/2021/05/25/%E7%82%BA-Next.js-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E7%94%A2%E7%94%9F-RSS-feed/</id>
        <link href="https://code.kpman.cc/2021/05/25/%E7%82%BA-Next.js-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E7%94%A2%E7%94%9F-RSS-feed/"/>
        <updated>2021-05-25T10:32:28.000Z</updated>
        <summary type="html"><![CDATA[Next.js 是 React 生態圈快速崛起的一套框架，本篇文章介紹在 Next.js 當中產生 RSS feed 的方法。]]></summary>
        <content type="html"><![CDATA[<p>Next.js 是 React 生態圈快速崛起的一套框架，本篇文章介紹在 Next.js 當中產生 RSS feed 的方法。</p>
<p><img src="https://i.imgur.com/cTahD2b.png" alt="Next.js with RSS"></p>
<!-- more -->
<h2>名詞簡介</h2>
<p>以下有些名詞我選擇直接用縮寫，因此在這邊先做介紹：</p>
<ul>
<li>CSR: Client Side Rendering</li>
<li>SSR: Server Side Rendering</li>
<li>SSG: Static Site Generation</li>
</ul>
<h2>起源</h2>
<p>有鑑於此部落格太久沒有更新，上一篇文章是<a href="/2018/06/08/%E5%BE%9E-Hexo-%E5%88%B0-Gatsby/">從 Hexo 搬到 Gatsby</a>，這兩套框架都是非常優異，也都有持續維護的狀態。</p>
<p>這幾年更加吸引大眾目光的是 Next.js，其背後團隊 Vercel 來頭不小。目前的 CEO <a href="https://github.com/rauchg">rauchg</a> 是 socket.io 作者，看<a href="https://github.com/socketio/socket.io/graphs/contributors">貢獻度</a>目前也是排在第一位。夾帶這些名氣，以及 Next.js 推出的解決方案，不論是 CSR, SSR, 和 SSG 都可以處理。</p>
<p>因此，就選擇將本部落格再度搬移到 Next.js 了。XD</p>
<h2>架構研究</h2>
<p>Next.js 沒有原生支援 RSS feed 產生，所以必須要根據 Next.js 的架構去研究，在哪一個時間點產生出 RSS feed 會是最可行的作法。</p>
<p>在研究了 Next.js 的流程後，有幾種作法：</p>
<h3>SSR 解決方案</h3>
<p>如果是 SSR 處理方式，尤其是直接將 project host 在 vercel 上面。可以直接在 <code>pages/rss.js</code> 裡面，利用 Next.js 的架構，直接在這支 JS 檔裡面處理回傳 RSS feed 的動作。</p>
<p>要注意的是 RSS 需要回傳 XML 的格式，因此  在 <code>pages/rss.js</code> 的 getServerSideProps 就必須要指定回傳的 header。詳細的實作可以參考<a href="https://dev.to/kendalmintcode/create-a-next-js-rss-feed-for-your-static-website-210p">這篇文章</a>。</p>
<p>然而因為我的架構是擁有自己的 markdown file，不論用哪些框架只是幫我把這些 markdown file 轉成 HTML render 出來即可，因此 SSR 就不是我選擇的方向，也就往 SSG 解決方案去思考了。</p>
<h3>SSG 解決方案</h3>
<p>SSG 就是將所有的檔案都在 build time 轉成 static file，所以自然沒有 server 端可以幫忙處理 response XML 的動作，因此就必須思考將 RSS feed 直接 build 成一個獨立的 public 檔案，讓想要訂閱 RSS feed 的人可以利用該連結直接訂閱。</p>
<p>在程式端具體的實作流程有許多種，以下舉我認為比較可行的兩種：</p>
<ol>
<li>寫一個獨立的 npm script，例如: <code>"postbuild": "node lib/rss.js"</code>，基於 npm script 的定義，只要在 build script 跑完後，就去直接執行這個 npm script 在 <code>public</code>（Next.js 定義的公開資料夾路徑）資料夾產生對應的 RSS file。</li>
<li>寫一個獨立的 JS function，在 Next.js build 階段確定有執行這個 function 去產生 RSS file 到 <code>public</code> 資料夾即可。</li>
</ol>
<p>這兩種真正執行的 function 內容幾乎一樣，就是包裝起來執行的方式和時間點不一樣而已。</p>
<p>我自己是選擇第二種，在 Next.js build 階段就有去執行產生 RSS file，可以在開發的時候比較好 debug。</p>
<h2>實作</h2>
<p>這次我選擇 <a href="https://github.com/jpmonette/feed">feed</a> 這個套件來幫忙產生 RSS feed。</p>
<h4>一、安裝 feed 套件</h4>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">yarn</span> <span class="token function">add</span> feed
</code></pre></div>
<h4>二、創建一個 JS 檔，產生一個 <code>Feed</code> instance。</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Feed</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'feed'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports">config</span> <span class="token keyword module">from</span> <span class="token string">'../config'</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateRSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> feed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Feed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    title<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">,</span>
    description<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">subtitle</span><span class="token punctuation">,</span>
    id<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token punctuation">,</span>
    link<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token punctuation">,</span>
    image<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/image.png</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    favicon<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/favicon.ico</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    copyright<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">© </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>
      config<span class="token punctuation">.</span><span class="token property-access">title</span>
    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. All rights reserved.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    feedLinks<span class="token operator">:</span> <span class="token punctuation">{</span>
      atom<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/atom.xml</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    author<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'Daniel Tseng'</span><span class="token punctuation">,</span>
      email<span class="token operator">:</span> <span class="token string">'s92f002@gmail.com'</span><span class="token punctuation">,</span>
      link<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>更多參數可以參考 <a href="https://github.com/jpmonette/feed#example">官方 Example</a></p>
<h4>三、把所有文章放進去 Feed instance</h4>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Feed</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'feed'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports">config</span> <span class="token keyword module">from</span> <span class="token string">'../config'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports">markdownToHtml</span> <span class="token keyword module">from</span> <span class="token string">'./markdown'</span><span class="token punctuation">;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAllPosts <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'./blog'</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateRSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> feed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Feed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 略，請見上方</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  posts<span class="token punctuation">.</span><span class="token method function property-access">forEach</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    feed<span class="token punctuation">.</span><span class="token method function property-access">addItem</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      title<span class="token operator">:</span> post<span class="token punctuation">.</span><span class="token property-access">frontmatter</span><span class="token punctuation">.</span><span class="token property-access">title</span><span class="token punctuation">,</span>
      id<span class="token operator">:</span> post<span class="token punctuation">.</span><span class="token property-access">slug</span><span class="token punctuation">,</span>
      link<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>post<span class="token punctuation">.</span><span class="token property-access">slug</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
      description<span class="token operator">:</span> post<span class="token punctuation">.</span><span class="token property-access">excerpt</span><span class="token punctuation">,</span>
      content<span class="token operator">:</span> <span class="token keyword control-flow">await</span> <span class="token function">markdownToHtml</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token property-access">content</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      author<span class="token operator">:</span> <span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          name<span class="token operator">:</span> <span class="token string">'Daniel Tseng'</span><span class="token punctuation">,</span>
          email<span class="token operator">:</span> <span class="token string">'s92f002@gmail.com'</span><span class="token punctuation">,</span>
          link<span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token property-access">siteUrl</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span><span class="token punctuation">,</span>
      date<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token property-access">date</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      image<span class="token operator">:</span> post<span class="token punctuation">.</span><span class="token property-access">ogImageUrl</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<h4>四、輸出至 public 資料夾</h4>
<p>在輸出的時候，需要注意的是，那些會訂閱 RSS 的 service 會 default 找哪些路徑？</p>
<p>靜態檔案解決方案，根據參考大家常放的檔案路徑，做了以下歸納：</p>
<ul>
<li><code>/atom.xml</code></li>
<li><code>/rss.xml</code></li>
<li><code>/rss/atom.xml</code></li>
</ul>
<p>因此我選擇這樣做：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword module">import</span> <span class="token imports">fs</span> <span class="token keyword module">from</span> <span class="token string">'fs'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Feed</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'feed'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports">config</span> <span class="token keyword module">from</span> <span class="token string">'../config'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAllPosts <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'./blog'</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> <span class="token function-variable function">generateRSS</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> feed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Feed</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token comment">// 略</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 略</span>

  fs<span class="token punctuation">.</span><span class="token method function property-access">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'./public/rss.xml'</span><span class="token punctuation">,</span> feed<span class="token punctuation">.</span><span class="token method function property-access">atom1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  fs<span class="token punctuation">.</span><span class="token method function property-access">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'./public/atom.xml'</span><span class="token punctuation">,</span> feed<span class="token punctuation">.</span><span class="token method function property-access">atom1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>至於為什麼選擇 Atom 1.0 格式而不是 RSS 2.0 格式，
主要是因為 RSS 2.0 有比較多的限制，相對之下，比較晚誕生的 Atom 1.0 格式是主流，（這點如果有講錯歡迎指教，我有看到我會馬上修正）。</p>
<p>因此，這邊直接選擇只支援 Atom 1.0 格式。</p>
<h4>五、加入 Next.js 流程</h4>
<p>在 Next.js 的流程中，有幾個基本但是重要的 function：</p>
<ul>
<li>getStaticProps (Static Generation)</li>
<li>getStaticPaths (Static Generation)</li>
<li>getServerSideProps (Server-side Rendering)</li>
</ul>
<p>在官方的文件也清楚的表明了：</p>
<blockquote>
<p><code>getStaticProps</code> (Static Generation): Fetch data at build time.</p>
</blockquote>
<p>也就是在 build time 的時候，Next.js 一定會執行這個 function。我們便可以把產生 RSS 的動作放進這個 function 裡面，如下：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// pages/index.js</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> generateRSS <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">'../utils/rss'</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getStaticProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">getAllPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> postPromises <span class="token operator">=</span> posts<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">post</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token spread operator">...</span>post<span class="token punctuation">,</span>
    html<span class="token operator">:</span> <span class="token keyword control-flow">await</span> <span class="token function">markdownToHtml</span><span class="token punctuation">(</span>post<span class="token punctuation">.</span><span class="token property-access">content</span> <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword control-flow">await</span> <span class="token function">generateRSS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 主要是這一行</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
    props<span class="token operator">:</span> <span class="token punctuation">{</span>
      posts<span class="token operator">:</span> <span class="token keyword control-flow">await</span> <span class="token known-class-name class-name">Promise</span><span class="token punctuation">.</span><span class="token method function property-access">all</span><span class="token punctuation">(</span>postPromises<span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>如此一來就可以在開發階段看到 RSS feed 產生了。</p>
<h2>結論</h2>
<p>搬移到 Next.js 之後，寫起來的體驗，更接近原生開發 React 的感覺，想要什麼功能自己實作，彈性很大很自由，而不像是 Gatsby 整套就是為了 SSG 而生的解決方案。在 Gatsby 遇到很多問題都有現成的套件，裝上去馬上就可以用。</p>
<p>然而有了彈性就代表需要選擇，為什麼選擇 A 而不是選擇 B，每一步都需要思考。坦白說實作這短短幾行 code 花不了多少時間，但是背後的選擇我想才是關鍵，藉由這篇文章記錄思考的過程。</p>
<h2>Reference</h2>
<ul>
<li><a href="https://phiilu.com/generate-rss-feeds-for-your-static-next-js-blog">Generate RSS feeds for your static Next.js blog</a></li>
<li><a href="https://www.jackherrington.com/csr-ssr-and-ssg-on-nextjs/">CSR, SSR, and SSG on NextJS</a></li>
<li><a href="https://github.com/kpman/blog/pull/8/files">我實作的 PR</a></li>
</ul>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[從 Hexo 到 Gatsby]]></title>
        <id>https://code.kpman.cc/2018/06/08/%E5%BE%9E-Hexo-%E5%88%B0-Gatsby/</id>
        <link href="https://code.kpman.cc/2018/06/08/%E5%BE%9E-Hexo-%E5%88%B0-Gatsby/"/>
        <updated>2018-06-08T20:55:19.000Z</updated>
        <summary type="html"><![CDATA[本篇文章記錄了我將部落格從 Hexo 轉換到 Gatsby 的過程，以及這過程當中相關設定的經驗分享。]]></summary>
        <content type="html"><![CDATA[<p>本篇文章記錄了我將部落格從 Hexo 轉換到 Gatsby 的過程，以及這過程當中相關設定的經驗分享。</p>
<p><img src="https://i.imgur.com/yGnymMq.png" alt="From Hexo to Gatsby"></p>
<!-- more -->
<p>本篇文章並非詳細介紹 Gatsby，如想了解更多，請至<a href="https://www.gatsbyjs.org/">官方網站</a>。</p>
<h2>緣由</h2>
<p>Hexo 是一套歷史已久的 static site generator，此部落格原本就是利用 Hexo 架起來的。然而，後起之秀 Gatsby 採用著不同的資料流處理方式，加上優異的架構，最重要的是該團隊獲得資金並成立公司的<a href="https://twitter.com/gatsbyjs/status/999684072501792768">新聞</a>一出，我對於這個專案後續維護更加看好，就決定搬家到 Gatsby。</p>
<h2>搬移過程</h2>
<p>此處列出一些在搬部落格過程中需要注意的點，並作大綱的列點，可以選擇自己喜歡的部份研究。</p>
<ul>
<li><a href="#markdown-%E6%95%B4%E7%90%86">Markdown 整理</a></li>
<li><a href="#url-%E4%B8%80%E8%87%B4%E6%80%A7">URL 一致性</a></li>
<li><a href="#page-%E8%A8%AD%E8%A8%88">Page 設計</a></li>
<li><a href="#favicon">Favicon</a></li>
<li><a href="#gatsby-plugins--useful-packages">Gatsby plugin &#x26; useful packages</a></li>
</ul>
<h2>Markdown 整理</h2>
<p>Hexo 原生就提供產生文章的 CLI API，因此使用上蠻方便，只要一個指令就可以自動產生 Markdown 檔。而 Gatsby 就得要自行選擇文檔的類型，因為當初選用 Hexo 就是它可以利用 Markdown 寫部落格，所以轉換到 Gatsby 自然就沿用 Markdown 了。</p>
<h3>gatsby-source-filesystem</h3>
<p>在部落格架構設計上，我把所有原始檔放在 <code>./content/_posts</code> 底下。但想讓 Gatsby 知道文件位置，就得利用 <code>gatsby-source-filesystem</code> 這個 plugin，如下設定：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-config.js</span>
plugins<span class="token operator">:</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    resolve<span class="token operator">:</span> <span class="token string">'gatsby-source-filesystem'</span><span class="token punctuation">,</span>
    options<span class="token operator">:</span> <span class="token punctuation">{</span>
      name<span class="token operator">:</span> <span class="token string">'posts'</span><span class="token punctuation">,</span> <span class="token comment">// Name this source</span>
      path<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token string">'./content/_posts'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div>
<p>ps. Gatsby 的範例都利用 <code>``(backtick)</code> 包住字串，但我還是習慣使用 single quote。</p>
<h3>gatsby-transformer-remark</h3>
<p>把原始 file 讀進來之後，Gatsby 也提供了專為 Markdown 檔處理的 plugin，名為 <code>gatsby-transformer-remark</code>。<br>
經過這個 plugin 處理過的資料，會被轉成 Gatsby 架構下的 <code>node</code>，此 node 的 type 為 <code>MarkdownRemark</code>，該 node 會增加許多有用資訊，例如：<code>html</code>, <code>headings</code>, <code>excerpt</code> 等等，省下許多 parse Markdown 檔的功夫。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-config.js</span>
plugins<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'gatsby-transformer-remark'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre></div>
<p>後續還會介紹更多這個 plugin 的設定方式，也可直接參考 <a href="https://github.com/kpman/kpman.github.com/blob/0f02b98eaa23e92f794adf4a14bfda4c1ec3be0d/gatsby-config.js#L24-L42">repo</a></p>
<h2>URL 一致性</h2>
<p>當初利用 Hexo 建立出來的 URL 為類似 <code>/2017/07/03/利用-Hub-來自動發-GitHub-PR/</code> 這樣的 pattern，
為了不 breaking 既有 URL，我選擇將新版的 URL 設計和當初一樣。</p>
<p>此時就得讓 Gatsby 讀懂日期，這邊當初猶豫是要從 Markdown 裡面拿或者是從檔名拿日期。
將日期寫在檔名有多一個好處，就是可以利用檔名來做排序，基於這樣就決定將原本的所有 Markdown 檔都加上日期，修改過後的檔名為 <code>2017-07-03-利用-Hub-來自動發-GitHub-PR.md</code>。</p>
<h3>onCreateNode</h3>
<p>Gatsby 提供 <code>onCreateNode</code> 此 API 操作，原理上是在 Gatsby 要 createNode 時，在該 node 上面加上一些我們用的到的資訊。
我在此處便是利用 RegExp 將檔名給 parse 出來，並在 node 上面新增一個 field 叫做 <code>slug</code>，也就是 URL 上面除了 domain 後面的 <a href="https://nodejs.org/api/url.html"><code>pathname</code></a> 部分。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-node.js</span>
<span class="token keyword">const</span> <span class="token constant">BLOG_POST_FILENAME_REGEX</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charset"><span class="token charset-punctuation punctuation">[</span><span class="token range">0<span class="token range-punctuation operator">-</span>9</span><span class="token charset-punctuation punctuation">]</span></span><span class="token quantifier number">+</span><span class="token group punctuation">)</span>-<span class="token group punctuation">(</span><span class="token charclass class-name">.</span><span class="token quantifier number">+</span><span class="token group punctuation">)</span><span class="token special-escape escape">\.</span>md<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>

exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">onCreateNode</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> node<span class="token punctuation">,</span> getNode<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createNodeField <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>

  <span class="token comment">// 確定是 Markdown 檔再做操作</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">internal</span><span class="token punctuation">.</span><span class="token property-access">type</span> <span class="token operator">===</span> <span class="token string">'MarkdownRemark'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> relativePath <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span><span class="token property-access">parent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">const</span> match <span class="token operator">=</span> <span class="token constant">BLOG_POST_FILENAME_REGEX</span><span class="token punctuation">.</span><span class="token method function property-access">exec</span><span class="token punctuation">(</span>relativePath<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> year <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> month <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> day <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> filename <span class="token operator">=</span> match<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 組出我們要的 slug pattern</span>
    <span class="token keyword">const</span> slug <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>year<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>month<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>day<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>filename<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>

    <span class="token comment">// 在該 node 上面多增加一個欄位，未來可以 Query</span>
    <span class="token function">createNodeField</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      node<span class="token punctuation">,</span>
      name<span class="token operator">:</span> <span class="token string">'slug'</span><span class="token punctuation">,</span>
      value<span class="token operator">:</span> slug<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>有了前述的 node 資料之後，我們在 Gatsby 創造這些 page，讓使用者在進入 <code>/YYYY/MM/DD/&#x3C;blog-title>/</code> 這樣的 URL 可以順利取得文章內容。</p>
<h3>createPages</h3>
<p>Gatsby 提供的另一個 API 叫做 <code>createPages</code>，此 API 就是你所有的 page 都需要透過該 API 來創造，如此一來 Gatsby 才可以正確的回傳該頁面。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// gatsby-node.js</span>
exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">createPages</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>
  <span class="token keyword">const</span> allMarkdown <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">graphql</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span>
<span class="token string">    {</span>
<span class="token string">      allMarkdownRemark {</span>
<span class="token string">        edges {</span>
<span class="token string">          node {</span>
<span class="token string">            fields {</span>
<span class="token string">              slug # 此處的 slug 就是上述 onCreateNode 時候加上去的</span>
<span class="token string">            }</span>
<span class="token string">          }</span>
<span class="token string">        }</span>
<span class="token string">      }</span>
<span class="token string">    }</span>
<span class="token string">  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  allMarkdown<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">allMarkdownRemark</span><span class="token punctuation">.</span><span class="token property-access">edges</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> node <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> slug <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">fields</span><span class="token punctuation">;</span>

    <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      path<span class="token operator">:</span> slug<span class="token punctuation">,</span> <span class="token comment">// 告訴 Gatsby 這個 URL path</span>
      <span class="token comment">// 這邊選用的 component，就可以在 pageQuery 使用 context 所傳進去的 slug</span>
      component<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/templates/post.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      layout<span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>
      context<span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// Data passed to context is available in page queries as GraphQL variables.</span>
        slug<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<ul>
<li></li>
</ul>
<h2>Page 設計</h2>
<p>在 Gatsby 的架構內，每一個需要不同 URL 的頁面都需要自己創造一個 page，例如：首頁、每一篇文章、archive 頁面等等，底下列出此部落格需要的 URL：</p>
<ul>
<li><code>/</code>: index page</li>
<li><code>/YYYY/MM/DD/&#x3C;blog-title>/</code>: article page</li>
<li><code>/archives</code>: archives page</li>
<li><code>/tags/&#x3C;tag></code>: tags page</li>
</ul>
<h3>index page</h3>
<p>因為 Gatsby 底下會自動的把 <code>./src/pages/*.js</code> 自動 create page，所以我們在設計首頁的時候，就是去修改 <code>./src/pages/index.js</code> 此頁即可。</p>
<p>該頁最主要就是把所有的文章時間、title 等資料拿出來，GraphQL 的 query 如下：</p>
<div class="remark-highlight"><pre class="language-graphql"><code class="language-graphql">// src/pages/index.js
export const pageQuery <span class="token operator">=</span> graphql`
  <span class="token keyword">query</span> BlogIndexQuery <span class="token punctuation">{</span>
    <span class="token comment"># query 依照 date 排序</span>
    allMarkdownRemark<span class="token punctuation">(</span><span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">fields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>frontmatter___date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> <span class="token constant">DESC</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      edges <span class="token punctuation">{</span>
        node <span class="token punctuation">{</span>
          fields <span class="token punctuation">{</span>
            slug
          <span class="token punctuation">}</span>
          html <span class="token comment"># 需要把 html 拿回來 render</span>
          frontmatter <span class="token punctuation">{</span>
            title
            <span class="token comment"># 可以在此處就把 date format 成我們要的格式</span>
            date<span class="token punctuation">(</span><span class="token attr-name">formatString</span><span class="token punctuation">:</span> <span class="token string">"MMM DD, YYYY"</span><span class="token punctuation">)</span>
            tags
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
`;
</code></pre></div>
<p>上述的 <code>html</code> 也可以用 <code>excerpt</code> 去拿，但我選擇拿 html 再選擇我要的顯示在首頁部分內容。</p>
<h3>archives page</h3>
<p>該頁面與 index page 大同小異，該 page 位於 <code>./src/pages/archives.js</code>，唯一不同的是因為 archives page 有一種整理的效果，因此我們只要拿 title、date、tags 即可。</p>
<h3>tags page</h3>
<p>tags page 顧名思義就是每篇文章我會給一些 tag，寫在 Markdown 最上方，所以可以利用套件幫我們產生的 frontmatter 拿到每一篇的 tags 資料，但要怎樣擁有不同頁的 tag 呢？</p>
<p>此時就必須在 createPage 的時候就將所有的 tag 拿出來，然後產生每一個 tag 的 page。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">//</span>
exports<span class="token punctuation">.</span><span class="token method-variable function-variable method function property-access">createPages</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> graphql<span class="token punctuation">,</span> boundActionCreators <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> createPage <span class="token punctuation">}</span> <span class="token operator">=</span> boundActionCreators<span class="token punctuation">;</span>
  <span class="token keyword">const</span> allMarkdown <span class="token operator">=</span> <span class="token keyword control-flow">await</span> <span class="token function">graphql</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span>
<span class="token string">    {</span>
<span class="token string">      allMarkdownRemark {</span>
<span class="token string">        edges {</span>
<span class="token string">          node {</span>
<span class="token string">            frontmatter {</span>
<span class="token string">              tags</span>
<span class="token string">            }</span>
<span class="token string">          }</span>
<span class="token string">        }</span>
<span class="token string">      }</span>
<span class="token string">    }</span>
<span class="token string">  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  allMarkdown<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">allMarkdownRemark</span><span class="token punctuation">.</span><span class="token property-access">edges</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> node <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span> tags <span class="token punctuation">}</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token property-access">frontmatter</span><span class="token punctuation">;</span>

    tags<span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token parameter">tag</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
      <span class="token function">createPage</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        path<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">/tags/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> <span class="token comment">// 此處創造 tag URL</span>
        component<span class="token operator">:</span> path<span class="token punctuation">.</span><span class="token method function property-access">resolve</span><span class="token punctuation">(</span><span class="token string">'./src/templates/tags.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 選擇用 tags template</span>
        layout<span class="token operator">:</span> <span class="token string">'index'</span><span class="token punctuation">,</span>
        context<span class="token operator">:</span> <span class="token punctuation">{</span>
          tag<span class="token punctuation">,</span> <span class="token comment">// 傳進去讓 tags template 的 pageQuery 可以使用該 tag 去 query</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre></div>
<p>創造完每一頁 tag 的 page 之後，我們來看看 tags template 應該怎樣寫。</p>
<div class="remark-highlight"><pre class="language-graphql"><code class="language-graphql">// ./src/templates/tags.js
export const pageQuery <span class="token operator">=</span> graphql`
  <span class="token keyword">query</span> PostByTag<span class="token punctuation">(</span><span class="token variable">$tag</span><span class="token punctuation">:</span> String<span class="token operator">!</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    allMarkdownRemark<span class="token punctuation">(</span>
      <span class="token attr-name">filter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">frontmatter</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">tags</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">in</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token variable">$tag</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
      <span class="token attr-name">sort</span><span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token attr-name">fields</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>frontmatter___date<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token attr-name">order</span><span class="token punctuation">:</span> <span class="token constant">DESC</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span> <span class="token punctuation">{</span>
      edges <span class="token punctuation">{</span>
        node <span class="token punctuation">{</span>
          id
          html
          fields <span class="token punctuation">{</span>
            slug
          <span class="token punctuation">}</span>
          frontmatter <span class="token punctuation">{</span>
            title
            date<span class="token punctuation">(</span><span class="token attr-name">formatString</span><span class="token punctuation">:</span> <span class="token string">"MMM DD, YYYY"</span><span class="token punctuation">)</span>
            tags
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
`;
</code></pre></div>
<p>最關鍵的就是 Query 的參數了，利用 createPage 傳進來的 <code>$tag</code>，我們在 <code>allMarkdownRemark</code> 的參數就利用到了 <code>filter</code>、<code>sort</code> 等使用情境，拿回所有擁有這個 tag 的文章資料再去做 render。</p>
<h2>Favicon</h2>
<p>當初設定 Favicon 也遇到一些問題，本來以為放在 <code>/static/favicon.ico</code> 就可以讓瀏覽器抓到，可是怎麼嘗試都不成功。
後來請教同事 <a href="https://github.com/jigsawye">@jigsawye</a> 才發現原來是要利用 loader，也就是直接將 favicon file 給 <code>import</code> 到環境內，再利用 <code>react-helmet</code> 做操作。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token comment">// ./src/layouts/Head.js</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Helmet</span></span> <span class="token keyword module">from</span> <span class="token string">'react-helmet'</span><span class="token punctuation">;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Favicon</span></span> <span class="token keyword module">from</span> <span class="token string">'../assets/favicon.png'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">Head</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> data <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">(</span>
  <span class="token operator">&#x3C;</span><span class="token maybe-class-name">Helmet</span><span class="token operator">></span>
    <span class="token operator">&#x3C;</span>link rel<span class="token operator">=</span><span class="token string">"icon"</span> type<span class="token operator">=</span><span class="token string">"image/png"</span> sizes<span class="token operator">=</span><span class="token string">"30x30"</span> href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token maybe-class-name">Favicon</span><span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">></span>
  <span class="token operator">&#x3C;</span><span class="token operator">/</span><span class="token maybe-class-name">Helmet</span><span class="token operator">></span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">Head</span><span class="token punctuation">;</span>
</code></pre></div>
<ul>
<li></li>
</ul>
<h2>Gatsby plugins &#x26; useful packages</h2>
<p>推薦幾個在架設這個部落格用到的 Gatsby plugin</p>
<ul>
<li><code>gatsby-plugin-react-next</code>: v1 還是內建 react v15，所以需要裝這套</li>
<li><code>gatsby-plugin-react-helmet</code>: 操作該頁面的 HTML meta 資料</li>
<li><code>gatsby-remark-prismjs</code>: 可以將 Markdown 內的程式碼做上色</li>
<li><code>gatsby-remark-autolink-headers</code>: 可以讓 Markdown 的 Heading 都自動加上 id，瀏覽更方便</li>
<li><code>gatsby-plugin-sitemap</code>：自動產生 Sitemap</li>
<li><code>gatsby-plugin-feed</code>：自動產生 RSS feed，production 才會輸出，輸出檔名為 <code>/rss.xml</code></li>
<li><code>gatsby-plugin-google-analytics</code>: 可以載入 GA 使用</li>
<li><code>disqus-react</code>: Disqus 官方的 React 套件</li>
</ul>
<h2>結論</h2>
<p>這次的搬家花了不少心力，其中最多的時間其實是在重新架構整個 layout，而搬家過後因為 client side render，整體速度提昇不少，也對於 Gatsby 的生態圈蠻看好，希望可以持續發展。</p>
<p>雖然現在市面上有很多撰寫文章的平台（例如：Medium），不過這種一手打造的部落格，擁有自己 content 的感覺，或許就是工程師的浪漫吧。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用 Hub 來自動發 GitHub PR]]></title>
        <id>https://code.kpman.cc/2017/07/03/%E5%88%A9%E7%94%A8-Hub-%E4%BE%86%E8%87%AA%E5%8B%95%E7%99%BC-GitHub-PR/</id>
        <link href="https://code.kpman.cc/2017/07/03/%E5%88%A9%E7%94%A8-Hub-%E4%BE%86%E8%87%AA%E5%8B%95%E7%99%BC-GitHub-PR/"/>
        <updated>2017-07-03T23:55:19.000Z</updated>
        <summary type="html"><![CDATA[## 起源

因為工作和平時習慣的 Git 協作平台是 GitHub，因此常常發 pull request (以下簡稱 PR) 到 GitHub 上面，而這個流程對我來說不太順手，因此便想要利用更自動化的方式來做掉。]]></summary>
        <content type="html"><![CDATA[<h2>起源</h2>
<p>因為工作和平時習慣的 Git 協作平台是 GitHub，因此常常發 pull request (以下簡稱 PR) 到 GitHub 上面，而這個流程對我來說不太順手，因此便想要利用更自動化的方式來做掉。</p>
<p><img src="https://i.imgur.com/jEBYSRO.png" alt=""></p>
<!-- more -->
<h2>舊有流程</h2>
<p>一般來說發 GitHub 的 PR 流程如下：</p>
<ol>
<li>在 local commit</li>
<li>推 local branch 到 remote 上面</li>
<li>打開 GitHub 網站</li>
<li>進到你的 repo 頁面</li>
<li>點開 PR 按鈕</li>
<li>編輯 PR title</li>
<li>按下按鈕確認發 PR</li>
</ol>
<p>這樣的流程除了需要在瀏覽器 和 terminal 間切換外，最麻煩的是需要操作滑鼠多點好幾下，整個流程會將思緒打斷。</p>
<h2>Hub</h2>
<p>這是一套 GitHub 官方所維護的套件，用來加強原生 git 的功能，而這個套件剛好提供了
<code>$ hub pull-request</code> 的功能，可以在該 local branch 發 PR。</p>
<p>使用 Hub 套件發 PR 流程如下：</p>
<ol>
<li>在 local commit</li>
<li>推 local branch 到 remote 上面</li>
<li>$ hub pull-request</li>
<li>進入 vim 模式</li>
<li>編輯 vim</li>
<li>編輯完後需要存檔離開 vim ，Hub 才會自動發 PR</li>
</ol>
<p>使用 Hub 後流程已改善，把在瀏覽器上的操作帶回到 terminal，但整體使用卻依舊不便，因此我便思考能不能一鍵發 PR 到 GitHub 上面，而最後找到了下面這個解決方案，雖非最完善，但方便不少。</p>
<h2>一鍵自動化流程</h2>
<h3>Setup</h3>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">$ <span class="token function">vim</span> ~/.oh-my-zsh/lib/aliases.zsh <span class="token punctuation">(</span>in my <span class="token keyword">case</span><span class="token punctuation">)</span>
$ <span class="token builtin class-name">alias</span> <span class="token assign-left variable">pr</span><span class="token operator">=</span><span class="token string">'hub pull-request -m "<span class="token variable"><span class="token variable">$(</span><span class="token function">git</span> reflog -1 <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'\''</span>s/^.*: //<span class="token string">'\''</span><span class="token variable">)</span></span>" | xargs open'</span>
$ <span class="token builtin class-name">source</span> ~/.zshrc <span class="token punctuation">(</span>in my <span class="token keyword">case</span><span class="token punctuation">)</span>
</code></pre></div>
<h3>usage</h3>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token comment"># local commit</span>
$ <span class="token function">git</span> push origin <span class="token operator">&#x3C;</span>branch-name<span class="token operator">></span> <span class="token operator">&#x26;&#x26;</span> <span class="token function">pr</span>
</code></pre></div>
<p>藉由 Hub 的 pull-request 加上自己所寫的 alias，
此 alias 會將 commit message 的第一行拿出來自動當做 PR title，
且會自動打開瀏覽器，可以再度進行檢視或做最後的修正。</p>
<h2>結論</h2>
<p>能夠利用小技巧將繁瑣重複的事情給自動化，是每個人都很樂見的，在此分享，希望能幫助到可能也需要的你。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[將 JS Callback 轉成 Promise]]></title>
        <id>https://code.kpman.cc/2016/12/16/%E5%B0%87-JS-Callback-%E8%AE%8A%E6%88%90-Promise/</id>
        <link href="https://code.kpman.cc/2016/12/16/%E5%B0%87-JS-Callback-%E8%AE%8A%E6%88%90-Promise/"/>
        <updated>2016-12-16T07:57:57.000Z</updated>
        <summary type="html"><![CDATA[隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。

然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。]]></summary>
        <content type="html"><![CDATA[<p>隨著越來越多 JS 開發者的提倡，越來越多人擁抱 ES6(+) 的語法，其所帶來的好處讓許多開發者願意接受。</p>
<p>然而一些新接觸的開發者，在流程控制上會聽聞 Promise 的好處進而開始使用，但較早期的套件會遵循著 node.js style 的 Callback；因此本篇文章將會介紹如何將這類 Callback 利用套件轉成 Promise。</p>
<p><img src="https://i.imgur.com/Xhzct6v.png" alt=""></p>
<!-- more -->
<h2>Node.js Style Callback</h2>
<p>在 JS 的流程處理上，有許多人一定會遇見 Callback function，而 node.js 有獨特的規範，遵循著這類規範會讓更多開發者受益，這類的 Callback 被稱為 <code>Error-First Callbacks</code>。</p>
<ul>
<li>非同步的 Callback function 第一個參數是錯誤物件，有錯誤就會回傳錯誤訊息，沒有錯誤則第一個值會是 null。剩下的參數為 Callback function 正常情況下會回傳的值。</li>
</ul>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript">fs<span class="token punctuation">.</span><span class="token method function property-access">readFile</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token arrow operator">=></span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword control-flow">throw</span> err<span class="token punctuation">;</span> <span class="token comment">// 此處為 Node.js Style Callback</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>thenify 套件使用</h2>
<h4>使用情境</h4>
<p>將會是把第三方套件 Node.js Style Callback 轉成 Promise，接著就可以 <code>.then()</code> 或者是利用 <code>async</code> <code>await</code> 去處理流程了。值得一提此套件利用的是 <code>any-promise</code>，理論上你可以隨時的設置你想要的 Promise 實作。</p>
<h4>使用方法</h4>
<p>因為 README 上面寫的蠻不清楚，以下列出幾種狀況，也推薦看套件的測試檔案<a href="https://github.com/thenables/thenify/blob/master/test/test.js">範例</a>：</p>
<p>範例一：非同步 function 直接接收 cb</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 處理複雜流程</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>

<span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre></div>
<p>範例二：非同步 function 直接接收 cb，該 cb 回傳多個參數</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 處理複雜流程</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 除了第一個 error msg 外，回傳多個值</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>

<span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3]，會轉成 array</span>
</code></pre></div>
<p>範例三：非同步 function 直接接收多個參數及 cb，該 cb 亦接受多個參數</p>
<p><strong>此範例為最常被使用功能，關鍵點為 cb 位在 fn 的最後一個參數，且此 cb 遵循著上述提到的 Node.js Style Callback。</strong></p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> cb</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 處理複雜流程</span>
  <span class="token function">cb</span><span class="token punctuation">(</span><span class="token keyword null nil">null</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最後回傳 error msg(null) 和 a, b</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> p <span class="token operator">=</span> <span class="token function">thenify</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// p is a promise now.</span>

<span class="token function">p</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">then</span><span class="token punctuation">(</span><span class="token parameter">values</span> <span class="token arrow operator">=></span> <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2]，callback 回傳的值，一樣會包成 array</span>
</code></pre></div>
<h2>結論</h2>
<p>隨著 node 核心原生支援的語法越來越多，選擇利用 babel 搭配就可以在此時享受到 Promise 甚至是 async, await 語法帶來的好處，然而較早期的套件甚至不預設回傳 Promise，此時便需要一些工具的幫助。</p>
<p>希望這篇文章能幫助到那些一接觸學習 JS 流程控制就享受到 Promise 好處，但實務上卻不太理解如何處理原生或第三方套件這類 Callback function 的開發者。</p>
<h2>reference</h2>
<ul>
<li><a href="https://www.npmjs.com/package/thenify">thenify package</a></li>
<li><a href="http://eddychang.me/blog/javascript/57-node-js-error-first-callback.html">Node.js error-first callback</a></li>
<li><a href="http://welefen.com/post/how-to-convert-callback-to-promise.html">如何把 Callback 接口包装成 Promise 接口</a></li>
</ul>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 變數宣告]]></title>
        <id>https://code.kpman.cc/2016/09/17/JavaScript-%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A/</id>
        <link href="https://code.kpman.cc/2016/09/17/JavaScript-%E8%AE%8A%E6%95%B8%E5%AE%A3%E5%91%8A/"/>
        <updated>2016-09-17T15:41:31.000Z</updated>
        <summary type="html"><![CDATA[JS 宣告變數的方式在 ES6 之後增加了 `let` 和 `const`，這篇文章將會談談 `var`、`let` 和 `const`之間的差異。]]></summary>
        <content type="html"><![CDATA[<p>JS 宣告變數的方式在 ES6 之後增加了 <code>let</code> 和 <code>const</code>，這篇文章將會談談 <code>var</code>、<code>let</code> 和 <code>const</code>之間的差異。</p>
<p><img src="https://i.imgur.com/Jgd8jj5.jpg" alt=""></p>
<!-- more -->
<h2>變數宣告的過程</h2>
<p><img src="https://i.imgur.com/ya351ON.png" alt=""></p>
<p>如圖所見，JS 內變數的宣告總共會經歷三個階段</p>
<ul>
<li>Declaration: 在相對應的作用域範圍內註冊變數名字</li>
<li>Initialization: 分配記憶體使用</li>
<li>Assignment: 賦予該變數的值</li>
</ul>
<h2>var</h2>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">var</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>
x <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>

<span class="token comment">// all in one line</span>
<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>
</code></pre></div>
<p><code>var</code> 廣泛被使用，直到 ES6 推出後才有了其他的替代方式，而如果 var 被宣告在函數內，則沒有辦法在函數外部取得該變數。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">someFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> innerVar <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span>
  <span class="token keyword control-flow">return</span> innerVar<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>innerVar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerVar is not defined</span>
</code></pre></div>
<h2>let</h2>
<p>在 ES6 後，出現了 <code>let</code> 的方式宣告變數，它和 <code>var</code> 有共同的作用，便是在函數中封閉，額外的效果是在 block statement 內也是封閉，作用域變得更小範圍，可以減少錯誤的發生。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">let</span> x<span class="token punctuation">;</span> <span class="token comment">// Declaration, Initialization</span>
x <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span> <span class="token comment">// Assignment</span>

<span class="token comment">// all in one line</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token string">'Hello World'</span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">let</span> innerLet <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// do nothing</span>
<span class="token punctuation">}</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: innerLet is not defined</span>
</code></pre></div>
<p>上述例子代表 innerLet 只能在 block statement 內存活，跳出這個 block statement 就無法取得，我們將 let 換成 var 看看：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> innerLet <span class="token operator">=</span> <span class="token string">'hi'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword control-flow">else</span> <span class="token punctuation">{</span>
  <span class="token comment">// do nothing</span>
<span class="token punctuation">}</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>innerLet<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// hi</span>
</code></pre></div>
<p>由上述可以清楚看到將 <code>let</code> 宣告的方式改成 <code>var</code> 則可以在 block statement 之外取得該變數，這就是 <code>let</code> 相對於 <code>var</code> 作用域更小的關係。</p>
<h2>const</h2>
<p><code>const</code> 顧名思義就是 constant 的縮寫，ES6 新的語法，代表說只要當宣告過後，該賦予的值就不能被更動，更嚴格來說，是該變數指向的記憶體位址不能被更動。因此，當利用 const 宣告了 <code>Array</code> 或是 <code>Object</code>，只要不重新賦予值，而是更動 array 或 object 內部狀況，是可以被接受的操作方式，參考以下例子：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token keyword">const</span> <span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>
<span class="token constant">PI</span> <span class="token operator">=</span> <span class="token number">3.1415926</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token method function property-access">push</span><span class="token punctuation">(</span><span class="token constant">PI</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [ 3.14159 ];</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token property-access">pi</span> <span class="token operator">=</span> <span class="token constant">PI</span><span class="token punctuation">;</span> <span class="token comment">// { pi: 3.14159 };</span>

arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>
obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Assignment to constant variable.</span>
</code></pre></div>
<h2>Hoisting</h2>
<p>在利用 <code>var</code>, <code>let</code>, <code>const</code> 宣告變數的時候，變數都會自動的做 <code>Hoisting</code>，也就是被抬升到該作用域的最高處，但是抬升過後，<code>var</code> 會對於變數賦予值 <code>undefined</code>，而 <code>let</code>, <code>const</code>一樣也會被抬升，但是沒有初始值，因此會有 ReferenceError 發生。</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span>
<span class="token keyword">var</span> hello<span class="token punctuation">;</span>
hello <span class="token operator">=</span> <span class="token string">"I'm a variable"</span><span class="token punctuation">;</span>

<span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span>world<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError: world is not defined</span>
<span class="token keyword">let</span> world<span class="token punctuation">;</span>
world <span class="token operator">=</span> <span class="token string">"I'm a variable"</span><span class="token punctuation">;</span>
</code></pre></div>
<h2>結論</h2>
<p>在 ES6 推出後，應該盡可能的利用 <code>let</code> 和 <code>const</code> 去宣告變數，因為它們的限制更高，會減少出錯的機會。若有使用 ESLint，甚至有條件限制使用 <code>var</code>。若是情況一定需要使用 <code>var</code>，也應該在作用域的最一開始就宣告變數，以免發生 hoisting 導致無法預期的結果出現。</p>
<h3>reference</h3>
<ul>
<li><a href="https://www.sitepoint.com/how-to-declare-variables-javascript/">How to Declare Variables in Javascript</a></li>
<li><a href="https://github.com/rccoder/blog/issues/15">如何在 JavaScript 中声明变量</a></li>
</ul>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[babel 相關名詞簡介]]></title>
        <id>https://code.kpman.cc/2016/09/13/babel-%E7%9B%B8%E9%97%9C%E5%90%8D%E8%A9%9E%E7%B0%A1%E4%BB%8B/</id>
        <link href="https://code.kpman.cc/2016/09/13/babel-%E7%9B%B8%E9%97%9C%E5%90%8D%E8%A9%9E%E7%B0%A1%E4%BB%8B/"/>
        <updated>2016-09-13T23:27:11.000Z</updated>
        <summary type="html"><![CDATA[babel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。
然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。

本篇將會會介紹到：

- .babelrc
- babel-cli (with babel-node)
- babel-preset vs. babel-plugin
- babel-register
- babel-polyfill
- babel-plugin-transform-runtime ＆ babel-runtime
- babel-loader
- babel-eslint]]></summary>
        <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/babel/logo/master/babel.png" alt=""></p>
<p>babel 是現代前端工程師都不陌生的工具，它可以將 ES6 (+) 的語法轉換為 ES5 甚至是更低的版本，利用 babel 可以讓開發者即刻享受到 ES6 語法所帶來的便利性。
然而許多 babel 相關的名詞卻常常困擾想要入門的新手們，因此利用本文簡介那些與 babel 相關的名詞，以 babel 6 為主。</p>
<p>本篇將會會介紹到：</p>
<ul>
<li>.babelrc</li>
<li>babel-cli (with babel-node)</li>
<li>babel-preset vs. babel-plugin</li>
<li>babel-register</li>
<li>babel-polyfill</li>
<li>babel-plugin-transform-runtime ＆ babel-runtime</li>
<li>babel-loader</li>
<li>babel-eslint</li>
</ul>
<!-- more -->
<p>本文用意並非完善的介紹整個 babel 生態系，而是作者整理自己常見且容易搞錯的 babel 相關名詞。</p>
<h2>一、.babelrc</h2>
<p>這是 <code>babel</code> 這個工具需要用到的設定檔，以下所介紹到的各項都需要該設定檔讓 babel 有轉換的依據。</p>
<p>方法一：</p>
<p>直接寫獨立的 <code>.babelrc</code> 檔，一個基本的格式如下：</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2015"</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>方法二：</p>
<p>直接寫進 <code>package.json</code> 檔</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">{
  &#x26;quot;name&#x26;quot;: &#x26;quot;my-package&#x26;quot;,
  &#x26;quot;version&#x26;quot;: &#x26;quot;1.0.0&#x26;quot;,
  &#x26;quot;babel&#x26;quot;: {
    // your babel config here
  }
}</code></pre></div>
<p>註：方法二雖然可以這樣寫，但不建議使用，因為在 react-native 會出現<a href="https://github.com/mjackson/http-client/pull/7">已知的問題</a>。</p>
<h2>二、babel-cli</h2>
<p>利用 npm 安裝 babel-cli 將會同時註冊 <code>babel</code> 和 <code>babel-node</code> 兩個最常使用的指令。</p>
<p><code>$ npm install babel-cli --save-dev</code></p>
<p>利用上述指令安裝在 project 的目錄底下。</p>
<h3>babel</h3>
<p>可以直接在終端機利用 <code>babel</code> 指令做 ES6 的語法轉換，
常用的情景為將 <code>src</code> 資料夾 build 成 <code>lib</code> 資料夾，
身為 library 開發者，以不要預設使用者有 ES6 的環境為佳，
上述簡單的指令如下：</p>
<p><code>$ babel src -d lib</code></p>
<p>若需更多參數，請參考官方教學。</p>
<h3>babel-node</h3>
<p>可以利用 <code>babel-node myEs6.js</code> 直接運行 ES6 的 code，
當然需要 .babelrc 檔還有相關的 presets 或是 plugins 做為 babel 轉換的依據。</p>
<p>而 <code>babel-node</code> 執行的時候會預設載入 <code>babel-polyfill</code> 使用，
因此會佔大量的記憶體空間，官方不建議在 production 環境使用。</p>
<h2>三、babel-preset vs. babel-plugin</h2>
<p>presets 和 plugins 這兩個 key 在 <code>.babelrc</code> 檔內會很常看到，
其中的差異便是一個 preset 可以包含其他不同 presets 或是不同的 plugins。</p>
<p>例如 <code>babel-preset-es2015</code> 當中包含了
<code>transform-es2015-arrow-functions</code>
<code>transform-es2015-block-scoped-functions</code>
等 21 個不同的 plugins。</p>
<p><strong>順序問題</strong></p>
<p>babel 在執行 transform 的過程，會 plugins 先載入，且按照由上往下（由左向右）的順序載入，
但是要注意的事情，presets 會在 plugins 之後，然後載入的順序是由下往上（由右向左）的反向順序。</p>
<h3>stage</h3>
<p>babel 針對 stage 有實作幾個不同的 presets，包含了</p>
<ul>
<li>preset-stage-0</li>
<li>preset-stage-1</li>
<li>preset-stage-2</li>
<li>preset-stage-3</li>
</ul>
<p>stage 數字越大的 preset 所包含的 plugins 代表即將進入 <a href="https://github.com/tc39/proposals">ECMA262 standard</a>, <a href="https://tc39.github.io/process-document/">TC39 Process</a>，
官方預設的範例 stage 0 的 preset 使用就是因為其包含了 stage 1, 2, 3 的 presets，
而許多開發者直接用 stage 0，會把全部 stage 都載入，建議花時間了解各個 preset-stage 分別載入哪些 plugins 為佳。</p>
<p>stage 是會隨著時間演進，在不同的階段所看到的 stage 內容可能都不一樣。</p>
<h2>四、babel-register</h2>
<p>當載入 <code>babel-register</code> 後，其接下來的 es6 語法都可以被設定的 .babelrc 做轉換，</p>
<p>載入的方式有兩種：</p>
<p>方法一：</p>
<p>額外建立一個進入點檔案，由於在這個進入點 node 並不知道 es6 語法，
因此於此需要利用 <code>require('babel-register')</code> 的方式載入</p>
<p>進入點檔名以 <code>entry.js</code> 為例：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'babel-register'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./yourEs6Index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>因此未來執行 <code>node entry.js</code> 就可以利用 <code>babel-register</code> 動態載入的方式進行轉換語法。</p>
<p>方法二：</p>
<p>在終端機執行 <code>node</code> 的時候，直接利用 <code>-r</code> 參數帶入 <code>babel-register</code>，<code>-r</code> 等於 <code>--require</code> 代表 module to preload</p>
<p><code>$ node -r babel-register yourEs6Index.js</code></p>
<h2>五、babel-polyfill</h2>
<p>什麼是 <code>polyfill</code>?</p>
<p>wiki: In web development, a polyfill is code that implements a feature on web browsers that do not support the feature.</p>
<p>因此 <code>babel-polyfill</code> 顧名思義就是 babel 幫我們做了一些現階段還沒有被各家瀏覽器通用支援的 feature，好讓我們在現階段就可以利用一些未來原生的語法，例如：<code>Promise</code>, <code>Array.from</code>, <code>Object.assign</code>, <code>Array.includes</code> 等。
像是 Chrome 對於 es6 的支援度一直以來都蠻高的，但是並非每家瀏覽器廠商都能支援，因此需要有 polyfill。</p>
<p><strong>babel-node</strong>
當利用 babel-node 去運行 js 檔的時候，會<strong>預設</strong>載入 <code>babel-polyfill</code>，
因此你即可利用 babel-node run 一個帶有 promise 的 js 檔，
而不需再另外 require <code>bluebird</code> 等套件。</p>
<p><strong>babel-polyfill</strong>
主要 includes 了 <a href="https://github.com/facebook/regenerator/tree/master/packages/regenerator-runtime">regenerator runtime</a> 和 <a href="https://github.com/zloirock/core-js">core-js</a>。
<code>regenerator runtime</code> 就是將 generator/async 轉換成 es5 語法，而 <code>core-js</code> 是 Modular standard library for JavaScript 集合，詳細請參閱連結。</p>
<h2>六、babel-plugin-transform-runtime ＆ babel-runtime</h2>
<p>在做轉換的時候，若利用 <code>babel-polyfill</code> 會做 global scope，所以當你今天是要做 lib/tool 模式，沒辦法控制你的運行環境，則不適合利用 babel-polyfill，需要用 <code>babel-plugin-transform-runtime</code> 為佳。</p>
<ol>
<li><code>babel-plugin-transform-runtime</code> 會把多個檔案 reference 到 <code>babel-runtime</code> 這個 package，因此當你使用 <code>transform-runtime</code> 就一定要裝 <code>babel-runtime</code></li>
<li><code>babel-plugin-transform-runtime</code> 的轉換機制也是 alias 到 <code>core-js</code>，就和 <code>babel-polyfill</code> 一樣，所以不用再 require <code>babel-polyfill</code></li>
<li>官方建議安裝方法如下： transform 安裝進 devDependencies</li>
</ol>
<div class="remark-highlight"><pre class="language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> --save-dev babel-plugin-transform-runtime
$ <span class="token function">npm</span> <span class="token function">install</span> --save babel-runtime
</code></pre></div>
<h2>七、babel-loader</h2>
<p><code>loader</code> 是 <code>webpack</code> 用來載入各種不同類型檔案的套件，而 <code>babel-loader</code> 讓 webpack 可以用來執行 babel 轉換的的一種套件。</p>
<p>利用 <code>babel-loader</code> 可以利用 webpack 打包時候同時進行 babel 的轉換，以下是簡單範例檔：</p>
<div class="remark-highlight"><pre class="language-js"><code class="language-js">module<span class="token operator">:</span> <span class="token punctuation">{</span>
  loaders<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
      test<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex"><span class="token special-escape escape">\.</span>js<span class="token anchor function">$</span></span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
      loaders<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">'babel'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      exclude<span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">node_modules</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre></div>
<p>因為 <code>babel-loader</code> 的速度很慢，官方建議把 <code>node_modules</code> exclude 掉。</p>
<h2>八、babel-eslint</h2>
<p><code>ESLint</code> 堪稱是近代偉大的 linter 發明之一，它可以讓使用者高度客製化的 parser 語法，而目前原生的 ESLint 支援的語法有 <code>ES6/ES7</code>, <code>JSX</code>, and <code>object rest/spread</code>，如果你用到的更多 babel 語法則需要 babel-eslint 來幫忙。</p>
<p><code>$ npm install eslint@3.x babel-eslint@6 --save-dev</code></p>
<p>.eslintrc 範例檔</p>
<div class="remark-highlight"><pre class="language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"parser"</span><span class="token operator">:</span> <span class="token string">"babel-eslint"</span><span class="token punctuation">,</span>
  <span class="token property">"rules"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token number">0</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<h2>結論</h2>
<p>當然 babel 的套件不僅僅如此，還有 <a href="https://github.com/babel/babelify">babelify</a>, <a href="https://github.com/babel/babili">babili</a> 等許多相關工具尚未有時間介紹，本篇所提及的介紹希望能對於部分開發者有幫助。
若有不清楚或者會誤導讀者的方向，還請不吝指教。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[node.js 爬 Facebook 留言版]]></title>
        <id>https://code.kpman.cc/2016/05/17/node-js-%E7%88%AC-Facebook-%E7%95%99%E8%A8%80%E7%89%88/</id>
        <link href="https://code.kpman.cc/2016/05/17/node-js-%E7%88%AC-Facebook-%E7%95%99%E8%A8%80%E7%89%88/"/>
        <updated>2016-05-17T21:54:04.000Z</updated>
        <summary type="html"><![CDATA[聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。]]></summary>
        <content type="html"><![CDATA[<p>聽到網路爬蟲，有很多專案都是建立在 python 上面，在文字處理分析上， python 有很強大的套件可以使用，然而隨著 node.js 的發展越來越廣泛，也有許多因應的套件產生，今天將會介紹利用 FB 提供的 Graph API 來爬留言版。</p>
<p><img src="https://i.imgur.com/2Qckxbc.jpg" alt="Facebook Comment Plugin"></p>
<!-- more -->
<p>本文並非會有教學範例檔，僅會針對 FB 提供的 Graph API 做簡單的範例。
此處的範例會利用 ES6 的 <code>template strings</code> 語法。</p>
<h2>1. 了解 FB 留言版架構</h2>
<p>最近 FB 推出了可以回覆他人的功能，因此留言有可能會有巢狀情形，但可以觀察到的是，目前 FB 的機制就是至多一層的回覆。因此簡單的架構如下：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">comment 1
  - reply_comment 1
  - reply_comment 2
comment 2
  - reply_comment 1
  _ reply_comment 2
...
...</code></pre></div>
<h2>2. 確定該網址的留言數</h2>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://graph.facebook.com/?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token constant">GET</span> <span class="token string">'http://graph.facebook.com/?id=http://www.google.com'</span>
<span class="token punctuation">{</span>
  id<span class="token operator">:</span> <span class="token string">"http://www.google.com"</span><span class="token punctuation">,</span>
  shares<span class="token operator">:</span> <span class="token number">31205003</span><span class="token punctuation">,</span>
  comments<span class="token operator">:</span> <span class="token number">1323</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>因此可以知道 www.google.com 在 FB Graph API 有 1323 筆留言數。</p>
<h2>3. 利用 Graph API 拿第一層留言</h2>
<p>Graph API 在留言版其實是公開，只要給定 URL 就可以拿到該網址的留言，
這邊要注意的是需要確定該 URL 是 OG:URL 的參數給 FB 才拿的到。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">http://graph.facebook.com/comments?id=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token constant">URL</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#x26;limit=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>comments<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#x26;filter=stream</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</code></pre></div>
<p>底下是 return sample json</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>
  created_time<span class="token operator">:</span> <span class="token string">"2012-04-16T12:45:03+0000"</span><span class="token punctuation">,</span>
  <span class="token keyword module">from</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    name<span class="token operator">:</span> <span class="token string">"Sunil Maheshwari"</span><span class="token punctuation">,</span>
    id<span class="token operator">:</span> <span class="token string">"100000525493028"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  message<span class="token operator">:</span> <span class="token string">"hello"</span><span class="token punctuation">,</span>
  can_remove<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  like_count<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>
  user_likes<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  id<span class="token operator">:</span> <span class="token string">"381702034999_21746175"</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>若此處沒有加上 <code>&#x26;limit</code> 的話，會拿到比較少的數量。
加上 <code>&#x26;filter=stream</code> 參數，則會一併將回覆狀態的留言拿回來。
因為在此記錄部落格使用，在實作上並不會加上 <code>&#x26;filter=stream</code> 這個參數，以免拿第二層的時候重複還需要做額外處理。</p>
<h2>4. 拿 Graph API 第二層留言</h2>
<p>在拿第一層的時候，因為是 public API 狀態，因此不需要 token，且網址利用 http 就可以。
但在拿第二層留言，就需要 https + access_token 狀態。</p>
<p>最簡單取得 access_token 方式是到 <a href="https://developers.facebook.com/tools/explorer/">FB graph explorer</a> 申請 access_token 來實作。</p>
<p>接著需要串接的 API 格式為：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://graph.facebook.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/comments?access_token=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
</code></pre></div>
<p>上述 id 就是第一層拿回來的 json 格式內的 id，
token 則是 access_token。</p>
<p>在實作上因為無法透過第一層的 API 得到是否有無第二層留言，因此若要完整的拿取全部的留言，則需要將全部的 id 跑過一次才可以得到完整的結果。</p>
<h2>reference</h2>
<ul>
<li><a href="http://www.oneminuteinfo.com/2015/06/use-api-to-get-fb-comments-plugin-posts.html">Using Facebook Graph API To Crawl Comments from a Facebook Comments Plugin</a></li>
<li><a href="https://developers.facebook.com/tools/explorer/">FB graph explorer</a></li>
</ul>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[在 slack 建立 hubot]]></title>
        <id>https://code.kpman.cc/2016/04/18/%E5%9C%A8-slack-%E5%BB%BA%E7%AB%8B-hubot/</id>
        <link href="https://code.kpman.cc/2016/04/18/%E5%9C%A8-slack-%E5%BB%BA%E7%AB%8B-hubot/"/>
        <updated>2016-04-18T22:42:02.000Z</updated>
        <summary type="html"><![CDATA[slack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。]]></summary>
        <content type="html"><![CDATA[<p>slack 推出 bot 在 2016 這個時間點已經不算新鮮事，隨著 messenger 也推出自家的 bot 後，才真正開始接觸架設自己的 bot，網路上查到都是日文的資源較多，因此記錄這篇過程，希望能幫助到其他中文開發者。</p>
<p><img src="https://i.imgur.com/qzHh7bb.png" alt="slakbot &#x26; hubot"></p>
<!-- more -->
<h2>零、懶人包指令</h2>
<p>先把會用到的全部指令列在這邊，下面會分項目做解釋</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">npm install -g hubot coffee-script yo generator-hubot
mkdir hubot
cd hubot
yo hubot
npm install hubot-slack --save
git init
git add .
git commit -m &#x26;quot;Initial commit&#x26;quot;
GET HUBOT_SLACK_TOKEN // https://my.slack.com/services/new/hubot
Install the Heroku Toolbelt // https://toolbelt.heroku.com/
heroku create &#x26;quot;project-name&#x26;quot;
heroku config:add HEROKU_URL=https://&#x26;quot;project-name&#x26;quot;.herokuapp.com
heroku config:add HUBOT_SLACK_TOKEN=&#x26;quot;xoxb-********-********&#x26;quot;
git push heroku master</code></pre></div>
<h2>一、安裝本地環境</h2>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">npm install -g hubot coffee-script yo generator-hubot</code></pre></div>
<p>hubot 會用到 coffee-script 和 yo 去產生整個專案，所以需要安裝在全域 <code>-g</code></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">mkdir hubot
cd hubot</code></pre></div>
<p>此處創建資料夾可建立自己的名字</p>
<h2>二、產生 hubot 專案</h2>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">yo hubot</code></pre></div>
<p>這邊會問你一些問題，記得在 <code>adapter</code> 打 <code>slack</code>
此舉會讓官方產生預設 heroku 的 <code>Procfile</code> 裡面多了這一行</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">web: bin/hubot -a slack</code></pre></div>
<p>這是為了讓 heroku 啟動時候知道怎樣運作的指令</p>
<h2>三、安裝 hubot-slack 套件</h2>
<p>這是 slack 官方維護的套件，穩定度應該頗高，安裝後一併做一個專案 git 初始化並 commit</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">npm install hubot-slack --save
git init
git add .
git commit -m &#x26;quot;Initial commit&#x26;quot;</code></pre></div>
<h2>四、取得 HUBOT_SLACK_TOKEN</h2>
<p>到<a href="https://my.slack.com/services/new/hubot">此處</a>建立新的 hubot service
若有多個 team 帳號，請記得確定你登入的帳號是在哪一個 team 底下</p>
<p>取一個 hubot 要在 slack 內的名字，下圖用 <code>hubot</code> 做示範</p>
<p><img src="https://i.imgur.com/bpsLcz7.png" alt="hubot"></p>
<p>接著下一步就可以取得 HUBOT_SLACK_TOKEN，記得把這個 TOKEN 記下來</p>
<h2>五、本機端測試</h2>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">HUBOT_SLACK_TOKEN=xoxb-********-******** ./bin/hubot --adapter slack</code></pre></div>
<p>本機端記得先安裝 redis，hubot 會用到，
順利的話就可以在 slack 啟動 hubot 囉！</p>
<p><img src="https://i.imgur.com/EWkWV3Q.png" alt="hubot in slack">
可以打開 hubot 跟它對話，
如果看到 <code>PONG</code> 則代表成功</p>
<h2>六、將本地端 server 放上 heroku</h2>
<p>slack 官方推薦的平台是 heroku，這邊介紹如何運作，
要記得的原理就是其實上述已經在本機端可以運行了，
這個步驟就是將 server 放到 heroku 上面去跑而已。</p>
<p>首先安裝 Heroku Toolbelt，這部份請看 <a href="https://toolbelt.heroku.com/">heroku 官方教學</a></p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">heroku create &#x26;quot;project-name&#x26;quot;
heroku config:add HEROKU_URL=https://&#x26;quot;project-name&#x26;quot;.herokuapp.com
heroku config:add HUBOT_SLACK_TOKEN=&#x26;quot;xoxb-********-********&#x26;quot;
git push heroku master</code></pre></div>
<p>這個 project-name 其實就是未來你的 herokuapp 的 URL，
不能和其他人重複，因此名字可以想自己容易記得即可。</p>
<p><code>heroku config:add</code> 是將一些變數丟給遠端的 heroku 知道，
讓他可以抓到 <code>HEROKU_URL</code> <code>HUBOT_SLACK_TOKEN</code> 等，
接著就是將 local 這個 git repo push 到 heroku 上面。</p>
<h2>七、注意事項</h2>
<p>等到 heroku 跑完後，hubot 的 server 已經跑在 heroku 上面了，
而免費的 heroku dyno 有每 24 小時一定要停機 6 小時的規定，
因此若要拿來當正式的 bot 服務，
建議自己架 server 或者就付費買 heroku 的服務。</p>
<p>另外，在 hubot 專案底下的 <code>hubot-heroku-keepalive</code> 就是會固定戳 heroku，避免 30 分鐘後這個 dyno 就休息了。</p>
<p>在 heroku 上面有免費的 redis add-on 可以用，
每個月有 30mb 的免費使用量。</p>
<h2>reference</h2>
<ul>
<li><a href="https://hubot.github.com/docs/">hubot official doc</a></li>
<li><a href="https://www.npmjs.com/package/hubot-slack">hubot-slack npm README</a></li>
<li><a href="https://github.com/slackhq/hubot-slack#configuration">hubot configuration on heroku</a> 推薦看這份</li>
</ul>
<p>有任何問題，歡迎留言討論。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[從 deploy node.js 專案所學]]></title>
        <id>https://code.kpman.cc/2015/09/12/%E5%BE%9Edeploy-node-js-%E5%B0%88%E6%A1%88%E6%89%80%E5%AD%B8/</id>
        <link href="https://code.kpman.cc/2015/09/12/%E5%BE%9Edeploy-node-js-%E5%B0%88%E6%A1%88%E6%89%80%E5%AD%B8/"/>
        <updated>2015-09-12T23:18:17.000Z</updated>
        <summary type="html"><![CDATA[學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。]]></summary>
        <content type="html"><![CDATA[<p>學習 Node.js 已經兩年之餘，這段時間陸陸續續在開發上遇到一些問題（雷），然而隨著時間累積的叫做經驗，因此藉由此篇文章記錄從本機 development 環境到遠端 Linux 上的 production 所得到的經驗。</p>
<p><img src="https://i.imgur.com/GtZ5ROB.jpg" alt="Deploy"></p>
<!-- more -->
<p>以下的 localhost 環境皆為 Mac 10.10，express.js，
而 deploy 的環境皆為 Linux 14.04 環境。</p>
<h2>1. 環境變數</h2>
<p>NODE_ENV 是運行 Node.js 重要的變數，在本機開發的時候預設為 <code>NODE_ENV=development</code>。</p>
<p>在執行 <code>app.js</code> (aka <code>bin/www</code>) 時，選擇需要的變數 (development || production)，若要運行為 production 環境指令為</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">$ NODE_ENV=production node bin/www</code></pre></div>
<p>當然這個 <code>NODE_ENV</code> 值可以直接 export 在你所運行的環境當中，</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">$ export NODE_ENV=production
$ node bin/www</code></pre></div>
<p>而若不想每次開啟 shell 都要重新 export 一次，可以將 export 指令寫進 <code>~/.bashrc</code> 內，之後開啟 shell 就會設定 NODE_ENV=production 了！</p>
<hr>
<p>Q：那如何在 express.js 框架下的 app.js 拿到環境變數呢？
A：只要利用 express 框架為我們做好的 API 如下：</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// app.js</span>
app<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>
<p>即可得到 <code>NODE_ENV</code> 值。</p>
<h2>2. config 檔設定</h2>
<p>關於 config 檔的設定，每個人有不同的習慣，我介紹我常用的 config 檔設定方式。</p>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// config.js</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  development<span class="token operator">:</span> <span class="token punctuation">{</span>
    port<span class="token operator">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>
    <span class="token comment">// anything else</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  production<span class="token operator">:</span> <span class="token punctuation">{</span>
    port<span class="token operator">:</span> <span class="token number">3001</span><span class="token punctuation">,</span>
    <span class="token comment">// anything else</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span><span class="token property-access">exports</span> <span class="token operator">=</span> config<span class="token punctuation">;</span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-javascript"><code class="language-javascript"><span class="token comment">// app.js</span>
<span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./config.js'</span><span class="token punctuation">)</span><span class="token punctuation">[</span>app<span class="token punctuation">.</span><span class="token method function property-access">get</span><span class="token punctuation">(</span><span class="token string">'env'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> port <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token property-access">port</span><span class="token punctuation">;</span> <span class="token comment">// production mode will return 3001</span>
</code></pre></div>
<p>這樣設定 config 檔後，未來就可以利用 NODE_ENV 的不同來判斷應該要連接的資料，例如在 dev DB 和 production DB 的分開等等情況。</p>
<h2>3. ejs 樣板引擎快取問題</h2>
<p>在樣板引擎方面我習慣 ejs，而 ejs 會在 <code>production</code> 的狀態下把 view template 快取起來，加速 render 的時間，因此需要做 restart node server 的情況才可以解決快取問題。</p>
<p>ps. 或許這個問題有其他更好解法，非常歡迎協助補充。</p>
<h2>4. node 執行 .js 檔</h2>
<p>因為曾經撞過這些雷，單純就是經驗不足，以致於值得記錄一下 XD</p>
<p>直接提供 debug 經驗談：</p>
<ul>
<li>chmod -x yourfile.js // 權限問題</li>
<li>讀檔＆寫檔 // 請確定<code>相對路徑</code>和<code>絕對路徑</code>在環境的問題</li>
<li>第一行請加上 <code>#!/usr/bin/env node</code> // 讓環境找得到 node 去執行它</li>
</ul>
<h2>5. MongoDB 的匯出和匯入</h2>
<p>Q：在本機端匯出和匯入都好好的，不知道為什麼到遠端的環境就沒有辦法匯入？
A：原因是語系問題，記得在 DB 匯入前先執行 export 或寫入 bashrc 檔</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">LC_ALL</span></span><span class="token operator">=</span><span class="token string">"en_US.UTF-8"</span>
</code></pre></div>
<h2>後記</h2>
<p>花時間經歷過的才會印象深刻，上述這幾點都是我利用時間所換來的，將此記錄在這邊，也希望能或多或少幫助到一些人：）</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[從 Pocket 儲存全文到 Evernote]]></title>
        <id>https://code.kpman.cc/2015/07/23/%E5%BE%9EPocket-%E5%84%B2%E5%AD%98%E5%85%A8%E6%96%87%E5%88%B0Evernote/</id>
        <link href="https://code.kpman.cc/2015/07/23/%E5%BE%9EPocket-%E5%84%B2%E5%AD%98%E5%85%A8%E6%96%87%E5%88%B0Evernote/"/>
        <updated>2015-07-23T21:21:26.000Z</updated>
        <summary type="html"><![CDATA[Pocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。
然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。]]></summary>
        <content type="html"><![CDATA[<p>Pocket 是一款可以稍候待讀的 app，其漂亮的介面和離線閱讀的功能，使我對於它愛不釋手。
然而從英語語系出發的 Pocket 團隊，雖然在專業版提供全文檢索（full text search）的功能，但是在繁體中文上面還是略顯不足，常常找不到已經封存的文章內容，因此本篇記錄利用 Pocket 儲存到 Evernote 的過程。</p>
<p><img src="https://i.imgur.com/g9vZzcB.png" alt="RSS to Evernote"></p>
<!-- more -->
<p>Pocket 的閱讀介面是它的一大優勢，而 Evernote 的搜尋功能是有目共睹的準確，我們將利用 IFTTT 這個自動化工具來實作「當我從 Pocket 封存項目後，自動儲存全文到 Evernote」。</p>
<h2>0. IFTTT 內建 Pocket 問題所在</h2>
<p>有使用 <a href="https://ifttt.com">IFTTT</a> 的朋友應該知道說其實它有內建 Pocket 的選項，但是由於它提供的 Pocket 儲存只有所謂的 Excerpt 的功能，也就是只有部分的內容，並沒有辦法全文儲存到 Evernote 的 note 當中。</p>
<p><img src="https://i.imgur.com/Q90mCAB.png" alt="ifttt pocket feature"></p>
<p>因此我們的解決步驟為：</p>
<ol>
<li>建立 Pocket archive item 的 public full text RSS feed</li>
<li>創建 RSS to Evernote 的 recipe</li>
<li>問題解決</li>
</ol>
<p>未來就可以利用 Evernote 強大的搜尋功能來做到找到曾經閱讀封存的文章。</p>
<h2>1. 建立 Pocket 的 Full Text RSS 來源</h2>
<ul>
<li>首先到 <a href="https://getpocket.com/privacy_controls"><code>Pocket > Options > Privacy</code></a> 把 RSS feed 設為 public</li>
<li>點選 <code>Archive feed</code> 取得 Pocket 帳戶底下封存項目的 RSS feed link，連結應該為 <code>http://getpocket.com/users/&#x3C;你的帳號>/feed/read</code></li>
<li>到 <a href="http://fivefilters.org/content-only/"><code>fivefilters</code></a> 建立 full text RSS，貼上你的 feed url 後，按下 Create feed</li>
<li>把視窗連結記錄下來，這連結即為你的 full text RSS 來源</li>
</ul>
<h2>2. 創建 RSS to Evernote Recipe</h2>
<ul>
<li>根據此 <a href="https://ifttt.com/recipes/183722-save-full-text-of-new-pocket-item-to-evernote"><code>recipe</code></a> 創建你自己的版本</li>
<li>將上述的 full text RSS 連結貼上</li>
<li>根據步驟創建你的 IFTTT recipe</li>
</ul>
<p>完成上述步驟後，即可在 Evernote 你所命名的筆記本內看到你在 pocket 所封存的項目囉。</p>
<h2>使用心得</h2>
<p>其實在 pocket mobile app 上面，有直接儲存到 Evernote 的選項，但我閱讀文章完如果值得存下來的，我習慣直接 archive 起來。
實際使用這個 recipe 後，發現有一些網站的 full text RSS 抓的並不是很準確，速度也沒有很快，通常都要半個小時後才會在 Evernote 出現，但在網頁版並沒有存到 Evernote 的選項，在權衡下，我還是選擇使用此 recipe 來做為未來可以在 Evernote 搜尋的自動化工具。</p>
<h3>reference</h3>
<p><a href="https://capeably.wordpress.com/2014/06/21/automate-full-text-of-pocket-backup-to-evernote-with-ifttt-and-fivefilters/">Automate Full Text of Pocket Backup to Evernote with IFTTT and FiveFilters</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux 之 command line 上手]]></title>
        <id>https://code.kpman.cc/2015/05/10/Linux-%E4%B9%8B-command-line-%E4%B8%8A%E6%89%8B/</id>
        <link href="https://code.kpman.cc/2015/05/10/Linux-%E4%B9%8B-command-line-%E4%B8%8A%E6%89%8B/"/>
        <updated>2015-05-10T11:25:44.000Z</updated>
        <summary type="html"><![CDATA[開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。

這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。]]></summary>
        <content type="html"><![CDATA[<p>開發者對於 command line 一定不陌生，然而 Mac OS 會受到許多開發者的青睞，是因為其本身就是依照 unix 系統做開發，因此對於虛擬主機需要用到 command line 自然不陌生，整合性很好。</p>
<p>這篇 blog 記錄網站開發超過兩年半經驗的我，最常用到的終端機指令 (command line)。</p>
<p><img src="https://i.imgur.com/hGb22rh.png" alt=""></p>
<!-- more -->
<p>本篇針對的讀者是 mac 新手。</p>
<h2>環境設定</h2>
<p>建議下載 iterm2 來使用，有興趣可參考<a href="/2015/02/07/Sublime-%E8%88%87-iTerm-%E7%9A%84%E8%A6%96%E7%AA%97%E9%85%8D%E7%BD%AE/">設定</a></p>
<h2>常用指令</h2>
<p>前面加上錢字號($)代表此行為 command line 開始，真正在打的時候不用加入<code>$</code></p>
<p><code>$ cd</code>: 移動 root 位置
<code>$ cd ..</code>: 移動到目前所在位置的上一層
<code>$ cd ../..</code>: 移動到目前所在位置的上兩層</p>
<p><code>$ pwd</code>: 列出目前完整路徑 --> 可以知道自己現在在哪邊，再決定要如何利用 <code>cd</code> 移動</p>
<p><code>$ ls</code>: 列出所在目錄的檔案
<code>$ ls -a</code>: 列出的目錄檔案包含隱藏檔
<code>$ ls -al</code>: 列出的目錄檔案包含隱藏檔 &#x26; 檔案屬性和權限</p>
<p><code>$ vi(m) **.xx</code>: 創建檔名為<code>**</code>，附檔名為<code>xx</code>的檔案 --> 之後會進入 vi(m) 文字編輯模式，推薦查閱<a href="http://linux.vbird.org/linux_basic/0310vi.php">鳥哥 vim 教學</a></p>
<p><code>$ mkdir ***</code>: 創建名稱為<code>***</code>的資料夾
<code>$ rmdir ***</code>: 移除名稱為<code>***</code>的資料夾 --> 需確定資料夾為空</p>
<p><code>$ cp dest1 dest2</code>: 把 dest1 檔案複製到 dest2 的位置
<code>$ mv dest1 dest2</code>: 把 dest1 檔案移動到 dest2 的位置，亦可作為變更檔名使用，例如 <code>$ mv test.txt no-test.txt</code>，就可以把檔名 test 的文字檔改變成為 no-test 檔名。</p>
<p><code>$ sudo su</code>: 取得 root 權限</p>
<p>以上列出我最常用的指令，許多指令都可以帶有特殊的參數，unix base 底下的 command line 也不只這些，想要更進一步，可以再多去參考書籍或是教學。</p>
<h2>reference</h2>
<p><a href="http://linux.vbird.org/linux_basic/0220filemanager.php#dir_path">鳥哥 Linux 檔案與目錄管理</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用 crontab 來做 Linux 固定排程]]></title>
        <id>https://code.kpman.cc/2015/02/11/%E5%88%A9%E7%94%A8-crontab-%E4%BE%86%E5%81%9A-Linux-%E5%9B%BA%E5%AE%9A%E6%8E%92%E7%A8%8B/</id>
        <link href="https://code.kpman.cc/2015/02/11/%E5%88%A9%E7%94%A8-crontab-%E4%BE%86%E5%81%9A-Linux-%E5%9B%BA%E5%AE%9A%E6%8E%92%E7%A8%8B/"/>
        <updated>2015-02-11T11:57:45.000Z</updated>
        <summary type="html"><![CDATA[近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。]]></summary>
        <content type="html"><![CDATA[<p>近期有個需求，要在 Linux 上執行固定週期的時程，發現利用 crontab 這個內建的功能便可以完成，本篇記錄使用過程以及相關的參數。</p>
<p><img src="https://i.imgur.com/kcFpx34.png" alt=""></p>
<!-- more -->
<h2>crontab 介紹</h2>
<p>crontab 是 Linux 內建的機制，可以根據設置的時間參數來執行例行性的工作排程。</p>
<p><img src="https://i.imgur.com/OGytWih.gif" alt=""></p>
<p>上述這張圖可以清楚的顯示出前五項參數應該要帶進去的數字。<br>
依序是<code>分鐘</code>, <code>小時</code>, <code>日期</code>, <code>月份</code>, <code>星期</code>, <code>command</code><br>
參數為<code>0-59</code>, <code>0-23</code>, <code>1-31</code>, <code>1-12</code>, <code>0-6</code>, <code>需要執行的command</code></p>
<p>※ 星期參數為<code>0</code>代表星期日</p>
<h2>參數特殊字符意義</h2>
<p><code>【*】</code>：星號，代表任何時刻都接受的意思<br>
<code>【,】</code>：逗號，代表分隔時段。例如：<code>30 9,17 * * * command</code>，代表早上 9 點半和下午五點半都執行 command。<br>
<code>【-】</code>：減號，代表一段時間範圍。例如：<code>15 9-12 * * * command</code>，代表從 9 點到 12 點的每個 15 分都執行 command。<br>
<code>【/n】</code>：斜線，n 代表數字，表示每個 n 單位間隔。例如：<code>*/5 * * * * command</code>，代表每隔 5 分鐘執行一次 command。</p>
<p>還有一些人性化的參數，一次取代全部五個數字參數</p>
<p><code>【@reboot】</code> ：僅在開機的時候執行一次。<br>
<code>【@yearly】</code> ：一年執行一次，和<code>0 0 1 1 * command</code>效果一樣。<br>
<code>【@annually】</code>：（和<code>@yearly</code>一樣）<br>
<code>【@monthly】</code>：一個月執行一次，和<code>0 0 1 * * command</code>效果一樣。<br>
<code>【@weekly】</code>：一個星期執行一次，和<code>0 0 * * 0 command</code>效果一樣。<br>
<code>【@daily】</code>：每天執行，和<code>0 0 * * * command</code>效果一樣。<br>
<code>【@midnight】</code>：（和<code>@daily</code>一樣）<br>
<code>【@hourly】</code> ：每小時執行，和<code>0 * * * * command</code>效果一樣。</p>
<h2>crontab 操作</h2>
<p>crontab 是會根據不同的使用者去判定可以操作的範圍。</p>
<p><code>$ crontab -l</code>: 列出該使用者擁有的 crontab 指令<br>
<code>$ crontab -e</code>: 編輯該使用者的 crontab 指令<br>
<code>$ crontab -r</code>: 將使用者的 crontab 全部清除！（ <strong>小心使用</strong> ）</p>
<p>編輯完後就可以存檔離開，Linux 系統便會依照你設定的排程固定做事，非常方便。</p>
<p>※ 下達指令請用 <strong>絕對路徑</strong> 避免錯誤</p>
<h2>範例參考</h2>
<p><code>$ */5 * * * * /home/ubuntu/test.sh</code>：每五分鐘執行一次測試 shell script<br>
<code>$ 0 9 * * 1-6 node /home/ubuntu/workspace/report.js</code>：每天早上九點（除了星期日）執行 report.js 這隻檔案</p>
<h3>reference</h3>
<p><a href="http://kvz.io/blog/2007/07/29/schedule-tasks-on-linux-using-crontab/">Schedule Tasks on Linux Using Crontab</a>
<a href="http://linux.vbird.org/linux_basic/0430cron.php#whatiscron_linux">鳥哥的 Linux 私房菜 例行性工作排程 (crontab)</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime 與 iTerm 的視窗配置]]></title>
        <id>https://code.kpman.cc/2015/02/07/Sublime-%E8%88%87-iTerm-%E7%9A%84%E8%A6%96%E7%AA%97%E9%85%8D%E7%BD%AE/</id>
        <link href="https://code.kpman.cc/2015/02/07/Sublime-%E8%88%87-iTerm-%E7%9A%84%E8%A6%96%E7%AA%97%E9%85%8D%E7%BD%AE/"/>
        <updated>2015-02-07T19:55:04.000Z</updated>
        <summary type="html"><![CDATA[常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。
本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。]]></summary>
        <content type="html"><![CDATA[<p>常用的編輯器是 Sublime Text 3，但是終端機是 iTerm2，兩者一直沒有 IDE 般的整合。
本篇記錄下如何更改 iTerm2 的視窗配置，讓兩者操作體驗上有更佳的配合。</p>
<p><img src="https://i.imgur.com/wI92DCX.png" alt=""></p>
<!-- more -->
<h3>一般情境</h3>
<p>一般在 Sublime 和 iTerm 之間切換，我都是利用 <code>cmd+tab</code> 來做切換，但是這樣的使用情境，如果在筆電上開發，則會在執行 iTerm 的時候遮到 Sublime 的內容。如下圖所示：</p>
<p><img src="https://i.imgur.com/7lg3dx4.png" alt=""></p>
<p>讓我們更改 iTerm 的視窗配置，來改善這樣的情況！</p>
<h3>iTerm 視窗設定</h3>
<p><img src="https://i.imgur.com/gfMTEKP.png" alt=""></p>
<p>根據上圖，依序找到 Profiles --> Window --> Style: Bottom of screen
調整完後視窗的高度會根據設定的 Rows 高度來決定。</p>
<h3>快捷鍵設定</h3>
<p>根據個人習慣，在不與 Sublime 相關的快捷鍵衝突，我建議採用 <code>cmd+.</code> 來啟動 iTerm。</p>
<p><img src="https://i.imgur.com/Iw6ywHt.png" alt=""></p>
<p>※ 記得重新啟動 iTerms 來檢視設定的效果。</p>
<h3>成果 Demo</h3>
<p>做完上面的設定就大功告成了！</p>
<p>未來在編輯的時候，就可以利用 <code>cmd+.</code> 來啟動＆關閉終端機，操作感覺接近是內建在 Sublime 的環境。</p>
<p>如下圖所示：</p>
<p><img src="https://i.imgur.com/cJNfCCa.png" alt=""></p>
<p>Enjoy!</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 3 Mac 指南]]></title>
        <id>https://code.kpman.cc/2014/10/14/sublime-text-3-mac-%E6%8C%87%E5%8D%97/</id>
        <link href="https://code.kpman.cc/2014/10/14/sublime-text-3-mac-%E6%8C%87%E5%8D%97/"/>
        <updated>2014-10-14T15:16:59.000Z</updated>
        <summary type="html"><![CDATA[本篇是我根據自己使用習慣所做的快捷鍵整理，使用 sublime text 這套編輯器已經有 2 年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是 mac 使用者所使用者快捷鍵，希望對各位有幫助。]]></summary>
        <content type="html"><![CDATA[<p>本篇是我根據自己使用習慣所做的快捷鍵整理，使用 sublime text 這套編輯器已經有 2 年之餘，本身是個快捷鍵愛好者，對於發掘好用的快捷鍵樂此不疲，因此整理常用的快捷鍵在這篇，針對的是 mac 使用者所使用者快捷鍵，希望對各位有幫助。</p>
<!-- more -->
<h1>快捷鍵</h1>
<p>左邊為本篇所採用的縮寫，右邊則為鍵盤上面的標示</p>
<ul>
<li>cmd = command</li>
<li>shift = shift</li>
<li>option = option (alt)</li>
<li>control = control</li>
<li>pkg-ctrl = package control (command + shift + p)</li>
</ul>
<h2>基礎模式</h2>
<p>「基礎模式」介紹非 sublime 專用的快捷鍵，是一般使用者都可以快速上手的部分，想要看進階的可以跳過這部份。</p>
<h3>1. cmd + o (open)</h3>
<p>快速開啟整個資料夾(專案)</p>
<h3>2. cmd + w</h3>
<p>關閉視窗分頁</p>
<h3>3. cmd + n</h3>
<p>開新分頁</p>
<h3>4. cmd + shift + t</h3>
<p>重新開啟剛剛關閉的分頁</p>
<h3>5. cmd + shift + v</h3>
<p>貼上時，符合縮排</p>
<h2>畫面配置</h2>
<p>以下介紹 sublime 的畫面配置，常常因為編輯情境的所需，利用快捷鍵讓自己的畫面配置更加有彈性。</p>
<h3>1. cmd + option + 數字</h3>
<p>分割視窗，讓你的編輯範圍有多個 panel。
常用為<code>cmd + option + 1</code> 和<code>cmd + option + 2</code> 之間切換。
使用情境：左邊.html 右邊.css，編輯起來快速又方便。
建議：利用空白鍵右邊的兩個連續按鈕搭配數字。</p>
<p><img src="https://i.imgur.com/wWrUvSA.gif" alt=""></p>
<h3>2. cmd + k 再 cmd + b</h3>
<p>關閉左側資料夾目錄，讓畫面變得更寬敞。
這是我非常使用的一個快捷鍵，可以讓編輯的區域變得更大。</p>
<p><img src="https://i.imgur.com/IiAhOPx.gif" alt=""></p>
<h3>3. cmd + shift + control + f</h3>
<p>進入 zen 狀態，單份文件變成全螢幕，且左邊會自動縮排。
使用情境：當不常需要切換檔案時，此模式可以專注在單一檔案上，打這篇 blog 時我便這樣使用。
建議：快捷鍵不好記，可以點選<code>View --> Enter Distraction Free Mode</code></p>
<p><img src="https://i.imgur.com/DdD24a5.png" alt="zen"></p>
<h2>選取</h2>
<p>底下介紹的部份，回到 sublime text 編輯器本身，因為重點在編輯部分，因此在此將「選取」特別整理成一區。</p>
<h3>1. cmd + d (可連按)</h3>
<p>快速選取一範圍內的字串，<code>連按d</code>的話會選取整份文件內相同的字串。
當選取完後，可以直接打字，因此就可以將整份文件的字串全部改成新字串。</p>
<p><img src="https://i.imgur.com/tkjccVA.gif" alt=""></p>
<h3>2. cmd + l (可連按)</h3>
<p>選取游標在內的一行，<code>連按l</code>的話會往下選取下面的行數。</p>
<h3>3. cmd + shift + l</h3>
<p>此功能常與上述<code>cmd + l</code>配合，當選取多行後，按下<code>cmd + shift + l</code>，則會在多行的情況結尾出現游標，可以做多行編輯。
<img src="https://i.imgur.com/t6Mvfof.gif" alt=""></p>
<h3>4. option + 滑鼠拖拉</h3>
<p>當按住<code>option</code>後，搭配<code>滑鼠拖拉</code>便可以一次選取多行，並且產生游標。
<em>注意：拖曳的時候，滑鼠必須是由上到下垂直的選取狀態</em></p>
<p><img src="https://i.imgur.com/4cyN5eD.gif" alt=""></p>
<h3>5. cmd + 滑鼠點選</h3>
<p>按住<code>cmd</code>後，利用滑鼠在文件內點選，便可以在任何位置新增游標，產生多選狀態做編輯。</p>
<p><img src="https://i.imgur.com/ltNQcxi.gif" alt=""></p>
<h3>6. cmd + 左 或 右</h3>
<p>讓你的游標可以快速的回到該行的最前面或是最後面。</p>
<p><img src="https://i.imgur.com/WXyhkDE.gif" alt=""></p>
<h3>7. shift + 左 或 右</h3>
<p>每按一次會選擇一個字元，可以更加精準的選取自己要的部份。</p>
<p><img src="https://i.imgur.com/yPeO2UF.gif" alt=""></p>
<h3>8. cmd + shift + 左 或 右</h3>
<p>從游標所在處，往前選取或者往後選取該行到底。</p>
<p><img src="https://i.imgur.com/RX0XyMh.gif" alt=""></p>
<h2>尋找</h2>
<p>在 sublime 裡面尋找的功能做的非常強大，不論是文件內、或是文件名稱都可以快速找到。
底下將會利用 GoTo Anything 這個強大的內建功能來實作。</p>
<h3>1. cmd + p + 輸入檔名</h3>
<p>利用<code>cmd + p</code>，之後等視窗出現後，即可輸入你要找的檔名，按下 enter 即可開啟。</p>
<p><img src="https://i.imgur.com/eH0Lbiu.gif" alt=""></p>
<h3>2. cmd + p + ":" + 行數</h3>
<p>此功能相同於<code>control + g</code>，可以快速的跳到你指定的行數。</p>
<p><img src="https://i.imgur.com/cIp5SYH.gif" alt=""></p>
<h3>3. cmd + p + "@" + function name</h3>
<p>此功能相同於<code>cmd + r</code>，可以快速跳到定義的 function
建議：若是知道要找 function，建議使用這個而非使用<code>cmd + f</code></p>
<p><img src="https://i.imgur.com/IGdokvK.gif" alt=""></p>
<h3>4. cmd + p + "#" + keyword</h3>
<p>此功能可以快速找到文件內的關鍵字。
個人比較少用這個功能，利用<code>cmd + f</code>時，可以持續按 enter 找到目標。</p>
<h3>5. cmd + shift + f</h3>
<p>全文搜尋，可以找出「整個 project」內的關鍵字。
在 Find Result 內，點選兩下，便可以跳到該文件，這是我覺得最實用的部份。</p>
<p><img src="https://i.imgur.com/RYZ0GOQ.gif" alt=""></p>
<h2>快還要更快</h2>
<h3>1. cmd + control + 上 或 下</h3>
<p>將選取起來的行，整段往上或往下移動。
使用情境：當幾行 code 需要移動不算太大範圍的時候，可以使用這個快捷鍵，而不用剪下再貼上。</p>
<p><img src="https://i.imgur.com/R3jxRrV.gif" alt=""></p>
<h3>2. cmd + /</h3>
<p>將該行註解。
個人建議：搭配<code>cmd + l(連按)</code>可以選取多行，一次註解起來。</p>
<p><img src="https://i.imgur.com/B85owMN.gif" alt=""></p>
<h2>reference</h2>
<ol>
<li><a href="https://blog.generalassemb.ly/sublime-text-3-tips-tricks-shortcuts/">GETTING STARTED WITH SUBLIME TEXT 3: 25 TIPS, TRICKS, AND SHORTCUTS</a></li>
<li><a href="http://zh.lucida.me/blog/sublime-text-complete-guide/">Sublime Text 全程指南</a></li>
</ol>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx remove .html filename]]></title>
        <id>https://code.kpman.cc/2014/09/23/nginx-%E7%A7%BB%E9%99%A4-html-%E9%99%84%E6%AA%94%E5%90%8D/</id>
        <link href="https://code.kpman.cc/2014/09/23/nginx-%E7%A7%BB%E9%99%A4-html-%E9%99%84%E6%AA%94%E5%90%8D/"/>
        <updated>2014-09-23T10:10:56.000Z</updated>
        <summary type="html"><![CDATA[Nginx 是一套輕量化的 web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在 nginx 上移除.html 附檔名的作法。]]></summary>
        <content type="html"><![CDATA[<p>Nginx 是一套輕量化的 web server，因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器，本篇將介紹靜態網頁在 nginx 上移除.html 附檔名的作法。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg" alt="Nginx"></p>
<!-- more -->
<h3>一、Start</h3>
<p>本篇要做 nginx 這套 web server 的設定檔更改，來達到雖然存取靜態頁面，卻可以利用 mydomain.com/user 的 URL 來拿到所要的靜態頁面。</p>
<blockquote>
<p>其實是我單純是因為不想要看到.html 這樣的附檔名，這看起來不專業！</p>
</blockquote>
<p><em>本篇環境為 ubuntu14.04 下執行。</em></p>
<h3>二、Static file permission</h3>
<p>在 nginx 下，你要將靜態檔案放在 server 哪邊都可以，在此我根據之前 apache 習慣的設定，放在/var/www</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">cd /var
sudo mkdir www
sudo chown -R www-data:www-data /var/www/mydomain.com
sudo chmod 755 /var/www</code></pre></div>
<p>如此一來你便可以將整個靜態網站檔案放在/var/www/mydomain.com 目錄底下。</p>
<h3>三、Nginx conf setting</h3>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">cd /etc/nginx/sites-enabled
sudo vim mydomain.com</code></pre></div>
<p>修改底下內容為你要的設定</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">server {
  listen        80;
  root          /var/www/mydomain;
  index         index.html index.htm;
  server_name   mydomain;
  location / {
    try_files $uri $uri/ $uri.html;
  }
}</code></pre></div>
<p>此設定將會當抓到$uri 時，nginx 會自動帶入<code>$uri/</code>或是<code>$uri.html</code>
因此我們送出<code>mydomain.com/user</code>，nginx 會試著搜尋<code>mydomain.com/user/</code>或<code>mydomain.com/user.html</code>。</p>
<h3>四、Remove default conf</h3>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">sudo rm /etc/nginx/sites-enabled/default</code></pre></div>
<p>在我設定的時候，需把 default 刪除後，才可以正常的讀取到新設定的 mydomain.com 檔，歡迎各位先進補充這點。</p>
<h3>五、Restart Nginx</h3>
<p><code>/etc/init.d/nginx restart</code> || <code>sudo service nginx restart</code></p>
<p>如此一來你便可以利用<code>mydomain.com/user</code>純取到相關的靜態頁面了！</p>
<p><strong>reference</strong></p>
<p><a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-virtual-hosts-server-blocks-on-ubuntu-12-04-lts--3">How To Set Up nginx Virtual Hosts (Server Blocks) on Ubuntu 12.04 LTS</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[為你的mac終端機加上alias]]></title>
        <id>https://code.kpman.cc/2014/04/15/%E7%82%BA%E4%BD%A0%E7%9A%84mac%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%8A%A0%E4%B8%8Aalias/</id>
        <link href="https://code.kpman.cc/2014/04/15/%E7%82%BA%E4%BD%A0%E7%9A%84mac%E7%B5%82%E7%AB%AF%E6%A9%9F%E5%8A%A0%E4%B8%8Aalias/"/>
        <updated>2014-04-15T09:35:37.000Z</updated>
        <summary type="html"><![CDATA[在使用 iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多 code，把時間花在其他更重要事情上。]]></summary>
        <content type="html"><![CDATA[<p>在使用 iTerm（終端機）一段時間後，總覺得每次開啟新分頁，要進入到一個很深的資料夾略顯麻煩，因此上網查了簡易的方法，很快速便可以讓自己少打很多 code，把時間花在其他更重要事情上。</p>
<p><img src="https://i.imgur.com/Cc5u0nY.png" alt="iterm2"></p>
<!-- more -->
<h2>alias</h2>
<p>顧名思義就是別名，其語法如下，舉 mac 的 apache server 所在為 example:</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">alias</span> <span class="token assign-left variable">goproject</span><span class="token operator">=</span><span class="token string">'cd /Library/WebServer/Documents/yourproject'</span>
</code></pre></div>
<p>因此在 iTerm 打上這串後，未來便可以使用<code>goproject</code> 直接執行後面那串，快速又方便。</p>
<h2>永久執行 alias</h2>
<p>在設定完 alias，原本以為就這樣，結果發現如果重開 iTerm 後，之前設定的 alias 都不見了，原因是因為沒有真正寫入 bash 檔，因此在開啟 iTerm 的時候，並沒有被載入，所以我們要將</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/bashrc
// 在bashrc檔裡面加上新的一行
<span class="token builtin class-name">alias</span> <span class="token assign-left variable">goproject</span><span class="token operator">=</span><span class="token string">'cd /Library/WebServer/Documents/yourproject'</span>
</code></pre></div>
<p><em>ps. 因為是 root 權限，存檔的時候記得要用<code>:wq!</code>強制寫入。</em></p>
<p>重新開啟 iTerm 後，便可以使用 goproject 來快速進到你要的路徑，當然你也可以自行設定你要的指令。</p>
<h2>alias 相關指令</h2>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token builtin class-name">alias</span> // 列出所有的alias檔
<span class="token builtin class-name">unalias</span> goproject // 把goproject這個alias刪掉
</code></pre></div>
<p><strong><em>reference</em></strong></p>
<p><a href="http://www.linfo.org/alias.html">How to use the alias command</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web好UI設計法則 2]]></title>
        <id>https://code.kpman.cc/2014/04/14/web%E5%A5%BDui%E8%A8%AD%E8%A8%88%E6%B3%95%E5%89%87-2/</id>
        <link href="https://code.kpman.cc/2014/04/14/web%E5%A5%BDui%E8%A8%AD%E8%A8%88%E6%B3%95%E5%89%87-2/"/>
        <updated>2014-04-14T13:26:18.000Z</updated>
        <summary type="html"><![CDATA[本文譯自[goodui](http://www.goodui.org)，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為 goodui.org 所有，此為系列第 2 篇。]]></summary>
        <content type="html"><![CDATA[<p>本文譯自<a href="http://www.goodui.org">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為 goodui.org 所有，此為系列第 2 篇。</p>
<!-- more -->
<h1>6、區分已被選取和可點選區塊</h1>
<p>利用顏色、深度、對比來讓使用者確切的知道他們現在處於網站的哪一個地方，了解什麼地方可以點選，以便讓他們往下繼續逛他們趕興趣的頁面或內容。頁面上可見的文字區塊大致分成三種情況，分別是可以點(clickable)連結或按鈕、被選取(chosen)項目以及其他文字(plain text)。</p>
<p>底下這張圖示指出，藍色的字代表可以點擊(clickable)，而黑色的字代表你現在正在這個項目(chosen)內，簡單清楚的表達出區分的效果。</p>
<p><img src="http://goodui.org/images/idea006.png" alt="idea006"></p>
<h1>7、試著推薦而非列出都一樣的選項</h1>
<p>當你有多重選項的時候，有一個強調的選項或許對於使用者來說是一個不錯的刺激。</p>
<p>在這篇<a href="http://www.nytimes.com/2010/02/27/your-money/27shortcuts.html?_r=1&#x26;">心理學研究</a>指出，越少的選項可以讓使用者決定得更快，因此，試著強調某個特定的訴求吧！</p>
<p><img src="http://goodui.org/images/idea007.png" alt="idea007"></p>
<h1>8、試著用 undo 選項，而非確認</h1>
<p>在你要刪除一個動作的時候，如果視窗一直跳出「您確定要刪除嗎？」的訊息，還要你多按一個按鍵才能確定刪除，是不是有點惱人？</p>
<p>原作者提到他相信大多情況我們都不會誤按功能按鈕，有的話也是少數，因此利用重作(undo)的功能而非要使用者一直確認，如此一來能讓使用者更加有掌握感，當他們要進行大量的刪除動作，便可以提高效率，不小心誤刪的情況發生，還有重作的選項可以復原。</p>
<p><img src="http://goodui.org/images/idea008.png" alt="idea008"></p>
<h1>9、你的 TA 是特定族群，而非全部人</h1>
<p>這是一個決策，純看你要針對某特定的族群或是針對全部人，有利有弊是一定的。當你針對某特定族群打廣告，勢必會壓縮到其他的群眾，進而產生排他性。這種策略的風險是你可能會削減自己短期和限制潛在的客戶。</p>
<p><img src="http://goodui.org/images/idea009.png" alt="idea009"></p>
<h1>10、給明確的指示</h1>
<p>給使用者明確的指示，讓他們知道點下這一個按鍵或已經滑動到這個頁面的最底端，接下來他該何去何從？千萬不要用那種「或許」、「應該」的字眼造成不確定感。要讓你的使用者知道下一步該怎麼走，至於要不要走，就交給使用者自己去決定了。</p>
<p><img src="http://goodui.org/images/idea010.png" alt="idea010"></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Nginx with Node.js in different port]]></title>
        <id>https://code.kpman.cc/2014/04/11/nginx-with-nodejs-in-different-port/</id>
        <link href="https://code.kpman.cc/2014/04/11/nginx-with-nodejs-in-different-port/"/>
        <updated>2014-04-11T00:16:33.000Z</updated>
        <summary type="html"><![CDATA[Nginx 因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。

由於近期想要把不同的 node.js 程式放在同一個 server，因此開始研究 nginx 用法，記錄下來我的實作方式。]]></summary>
        <content type="html"><![CDATA[<p>Nginx 因為它的輕量、高效能而越來越多人喜歡使用它來做為網頁伺服器或是反向代理伺服器。</p>
<p>由於近期想要把不同的 node.js 程式放在同一個 server，因此開始研究 nginx 用法，記錄下來我的實作方式。</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/c/c5/Nginx_logo.svg" alt="Nginx"></p>
<!-- more -->
<h3>一、Domain 指向主機</h3>
<p>將不同的 domain 都指向你的主機 ip，此時都會指向 HTTP 預設的 80 port，後面再用 nginx 設定由不同的 port 去處理不同的 node.js 程式。</p>
<h3>二、安裝 Nginx in Ubuntu</h3>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">sudo apt-get update
sudo apt-get upgrade // 確定抓到套件
sudo apt-get install nginx
sudo service nginx start</code></pre></div>
<p>在安裝的時候，記得你如果有其他 server 在 run 必須要停掉，不然佔住 80 port 是沒有辦法裝成功 nginx 的。</p>
<h3>三、將 Node.js 設定不同 port</h3>
<p>會寫 node.js 應該會將 port listen 在不同的 port，注意不要用常用的那些 port 即可。例如：80(HTTP)、22(SSH)。</p>
<h3>四、設定 Nginx 資料夾檔案</h3>
<p>進到<code>/etc/nginx/sites-enabled</code>，然後創建跟你 domain 一樣的檔案，記得權限要用<code>sudo</code>去創</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">sudo vim domain1.com</code></pre></div>
<p>檔案內容</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">server {
    listen 80;
    server_name domain1.com;
    access_log /var/log/nginx/domain1.access.log;
    location / {
        proxy_pass    http://127.0.0.1:4000/;
    }
}</code></pre></div>
<p>同理創建 domain2.com，記得 4000 port 要改成你設定的 port。</p>
<h3>五、重啟 Nginx</h3>
<p><code>/etc/init.d/nginx restart</code></p>
<p>記得做過更動後，要重新啟動 nginx 才有用。
如此一來，不同的 domain 就可以連到同一台 server 的不同支 node.js 去執行了。</p>
<p><strong>reference</strong></p>
<p><a href="http://stackoverflow.com/questions/5009324/node-js-nginx-and-now/5015178#5015178">node.js + nginx - And now?</a>
<a href="http://zh.wikipedia.org/wiki/Nginx">wikipedia nginx</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[CI初體驗for靜態頁面]]></title>
        <id>https://code.kpman.cc/2014/04/06/ci%E5%88%9D%E9%AB%94%E9%A9%97for%E9%9D%9C%E6%85%8B%E9%A0%81%E9%9D%A2/</id>
        <link href="https://code.kpman.cc/2014/04/06/ci%E5%88%9D%E9%AB%94%E9%A9%97for%E9%9D%9C%E6%85%8B%E9%A0%81%E9%9D%A2/"/>
        <updated>2014-04-06T21:30:35.000Z</updated>
        <summary type="html"><![CDATA[第一次因為專案需要，而跟 PHP 後端工程師配合，我們選定了[CI](http://www.codeigniter.org.tw/)這套 framework 來使用，對於 CI 算是第一次接觸，因此想把從無到有的架設過程給記錄下來。]]></summary>
        <content type="html"><![CDATA[<p>第一次因為專案需要，而跟 PHP 後端工程師配合，我們選定了<a href="http://www.codeigniter.org.tw/">CI</a>這套 framework 來使用，對於 CI 算是第一次接觸，因此想把從無到有的架設過程給記錄下來。</p>
<p><img src="https://php.quicoto.com/wp-content/uploads/2013/07/codeigniter-logo.png" alt="codeigniter"></p>
<!-- more -->
<h2>1、擁有 php 環境</h2>
<p>Mac 內建 Apache，只要打開即可。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">sudo apachectl start</code></pre></div>
<h2>2、安裝 CI</h2>
<ul>
<li>到<a href="http://www.codeigniter.org.tw/user_guide/installation/downloads.html">官網</a>下載整份文件檔</li>
<li>放進 server 的路徑下 <code>/Libary/WebServer/Documents/</code></li>
<li>安裝完畢！</li>
</ul>
<h2>3、讀取靜態頁面</h2>
<h3>新增頁面</h3>
<p>此處新增名為 page.php 的檔案 <code>application -> view -> cep(optional dir) -> page.php</code></p>
<ul>
<li><img src="https://i.imgur.com/gC7kgs2.png" alt="page.php"></li>
</ul>
<h3>新增 static files</h3>
<p>如 CSS、JS 檔，習慣性會創建 assets 資料夾將他們放進去，並且放在跟 application 同階層的 dir 內，如圖。
<img src="https://i.imgur.com/BLh0okD.png" alt="assets"></p>
<h3>新增 route</h3>
<p><code>application -> config -> routes.php</code> 新增如下：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">$route[&#x26;#39;(:any)&#x26;#39;] = &#x26;#39;cep/$1&#x26;#39;;
$route[&#x26;#39;default_controller&#x26;#39;] = &#x26;quot;cep&#x26;quot;;
$route[&#x26;#39;404_override&#x26;#39;] = &#x26;#39;&#x26;#39;;</code></pre></div>
<h3>新增 controller</h3>
<p>在 controllers 資料夾內，新增 php 檔，內定新的 public function，參照 welcome.php 修改即可。</p>
<p>新增一個 class extends CI_Controller，裡面加上 page()這個 public function。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">class Cep extends CI_Controller {

    public function index()
    {
        $this-&#x26;gt;load-&#x26;gt;view(&#x26;#39;cep/index&#x26;#39;);
    }

    public function page()
    {
        $this-&#x26;gt;load-&#x26;gt;view(&#x26;#39;cep/page&#x26;#39;);
    }

}</code></pre></div>
<h3>路徑修改</h3>
<ul>
<li>application -> config -> config.php 改一行 <code>$config['base_url'] = '/專案資料夾名字/';</code></li>
<li>application -> config -> autoload.php 改一行 <code>$autoload['helper'] = array('url');</code> 原本是沒有 url，加上 url。</li>
<li>page.php 這頁的 CSS 和 JS 檔，修改成</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">&#x26;lt;link rel=&#x26;quot;stylesheet&#x26;quot; href=&#x26;quot;&#x26;lt;?php echo base_url(); ?&#x26;gt;assets/css/bootstrap.min.css&#x26;quot;&#x26;gt;
&#x26;lt;link rel=&#x26;quot;stylesheet&#x26;quot; href=&#x26;quot;&#x26;lt;?php echo base_url(); ?&#x26;gt;assets/css/main.css&#x26;quot;&#x26;gt;
&#x26;lt;script src=&#x26;quot;&#x26;lt;?php echo base_url(); ?&#x26;gt;assets/js/vendor/modernizr-2.6.2.min.js&#x26;quot;&#x26;gt;&#x26;lt;/script&#x26;gt;</code></pre></div>
<p>如此一來便可以在<code>http://localhost/專案資料夾/index.php/page</code> 看到靜態頁面了。</p>
<h2>4、移除 CI URL 上的 index.php</h2>
<p>因為每次網址上面都需要有 index.php，覺得不好看，因此兩個步驟把它改掉。</p>
<ol>
<li>在 root 加上<code>.htaccess</code>檔，內容如下</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">RewriteEngine on
RewriteCond $1 !^(index\.php)
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php/$1 [L,QSA]</code></pre></div>
<ol start="2">
<li>修改 apache 設定，將 httpd.conf 改掉。
原本 AllowOverride none 改成 All 即可。</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">&#x26;lt;Directory /Library/WebServer/Documents&#x26;gt;
    Options FollowSymLinks
    AllowOverride All
&#x26;lt;/Directory&#x26;gt;</code></pre></div>
<ol start="3">
<li>重新啟動 apache <code>sudo apachectl restart</code></li>
</ol>
<p><em>後記</em></p>
<p>因尚有其他專案，故本專案檔是全部在一個資料夾內，非直接在 web server 的 root 實作。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Web好UI設計法則 1]]></title>
        <id>https://code.kpman.cc/2014/03/19/web%E5%A5%BDui%E8%A8%AD%E8%A8%88%E6%B3%95%E5%89%87-1/</id>
        <link href="https://code.kpman.cc/2014/03/19/web%E5%A5%BDui%E8%A8%AD%E8%A8%88%E6%B3%95%E5%89%87-1/"/>
        <updated>2014-03-19T17:11:15.000Z</updated>
        <summary type="html"><![CDATA[本文譯自[goodui](http://goodui.org)，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為 goodui.org 所有。]]></summary>
        <content type="html"><![CDATA[<p>本文譯自<a href="http://goodui.org">goodui</a>，會寫這系列並非逐字翻譯，而是在研讀過後利用自己的方式表達並記錄分享之，全文圖片版權皆為 goodui.org 所有。</p>
<p><img src="https://i.imgur.com/ve2iCpO.png" alt="goodui"></p>
<!-- more -->
<h2>1、頁面單欄式而非多欄式</h2>
<p>採用單欄式的好處是可以讓讀者自然而然的了解閱讀方向為由上而下，採用多欄式的頁面設計，會有額外增加的 risk，會讓讀者容易分心。在文章（頁面）的最後採用 call to action，引導讀者點進你想要的導向頁面。</p>
<p><img src="http://goodui.org/images/idea001.png" alt="idea001"></p>
<h2>2、試著給些小禮物</h2>
<p>好朋友間互相送禮，是很正常不過的對吧？在面對你的使用者也是一樣的，根據互惠原則，給禮物是一個激勵使用者的手法，讓使用者會更願意回來你的網站。</p>
<p><img src="http://goodui.org/images/idea002.png" alt="idea002"></p>
<h2>3、把相似功能的介面合併在一起</h2>
<p>在過去，我們很容易將功能差不多的介面，在頁面上分成好多部分。當你的 UI 越分散，那麼該網站的使用者其學習曲線便越高，試著重新設計你的 UI 吧，把那些功能相近的按鈕、區塊放在一起。</p>
<p><img src="http://goodui.org/images/idea003.png" alt="idea003"></p>
<h2>4、讓別人來說，而非自己說</h2>
<p>列出那些曾經在 social media 討論本身產品的人，利用他們的見證會比自己在網站上面寫還來的有用。「Our customers say」會比「We are awesome」還更具有說服力。</p>
<p><img src="http://goodui.org/images/idea004.png" alt="idea004"></p>
<h2>5、重複你的主要訴求</h2>
<p>你的 call to action 是網頁中重要的項目，尤其在很長的頁面時，不要吝嗇讓它出現超過一次。當使用者滑到頁面底端時，是該他們做決定的時候了，離開或是完成你的主要訴求。</p>
<p><img src="http://goodui.org/images/idea005.png" alt="idea005"></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 2 實用套件]]></title>
        <id>https://code.kpman.cc/2013/11/30/sublime-text-2-%E5%AF%A6%E7%94%A8%E5%A5%97%E4%BB%B6/</id>
        <link href="https://code.kpman.cc/2013/11/30/sublime-text-2-%E5%AF%A6%E7%94%A8%E5%A5%97%E4%BB%B6/"/>
        <updated>2013-11-30T00:02:48.000Z</updated>
        <summary type="html"><![CDATA[Sublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的 Sublime Text 2 套件。]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/f5ZJthW.png" alt="Sublime Text 2" title="Sublime Text 2"></p>
<p>Sublime Text 2 是網頁開發者都不陌生的一套編輯器，除了單純的文字編輯外，它還有很多實用的套件，這篇來介紹我平常常用的 Sublime Text 2 套件。</p>
<!-- more -->
<h2>編輯環境</h2>
<ol>
<li>Mac 10.9</li>
<li>Sublime Text 2</li>
</ol>
<p>Mac 環境，所以快捷鍵會介紹 command 的配置，若 windows 版本請自行查閱。</p>
<h3>安裝 Package Control</h3>
<p>所謂 Package Control 就是 Sublime Text 2 用來裝套件的，因此在裝其他的套件之前，我們必須先來安裝 Package Control。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">開啟Sublime Text 2
開啟console，快捷鍵ctrl+`
貼上以下程式碼

import urllib2,os; pf=&#x26;#39;Package Control.sublime-package&#x26;#39;; ipp = sublime.installed_packages_path(); os.makedirs( ipp ) if not os.path.exists(ipp) else None; urllib2.install_opener( urllib2.build_opener( urllib2.ProxyHandler( ))); open( os.path.join( ipp, pf), &#x26;#39;wb&#x26;#39; ).write( urllib2.urlopen( &#x26;#39;http://sublime.wbond.net/&#x26;#39; +pf.replace( &#x26;#39; &#x26;#39;,&#x26;#39;%20&#x26;#39; )).read()); print( &#x26;#39;Please restart Sublime Text to finish installation&#x26;#39;)</code></pre></div>
<p>程式碼可以參照<a href="https://sublime.wbond.net/installation#st2">官網</a></p>
<p>安裝完後，未來我們就可以使用<code>cmd+shift+p</code>，打入<code>install package</code>，即可啟用 Package Control，如下圖</p>
<p><img src="https://i.imgur.com/5n76S9Q.png" alt="install package"></p>
<h3>安裝套件步驟</h3>
<ol>
<li>首先<code>cmd+shift+p</code></li>
<li>鍵入<code>install package</code></li>
<li>跳出新的輸入欄位後，在輸入你要的<code>package名稱</code></li>
<li>看著左下角，等它跑完</li>
<li>重新啟動 Sublime Text 2 即安裝完成。</li>
</ol>
<h2>必裝套件</h2>
<h4>一、BracketHighlighter</h4>
<p><img src="https://i.imgur.com/2ovEcG8.png" alt=""></p>
<p>這是一套超過 196K 人裝的套件，如圖所示，寫 html 常常遇到不知道 close tag 在哪邊，裡用它可以清楚的將 close tag 標示出來。<br>
另外它有一個很好的地方，就是會在每一行的前面列出來目前的 tag，不同的語言還有不同的 icon，因此可以更快的知道自己的位置。</p>
<h4>二、Emmet</h4>
<p>以前它叫做 Zen coding，現在則改為 Emmet。</p>
<p>可以將需要重複的 html 用很簡短的方式寫出來，例如：</p>
<ol>
<li><code>.container>.col-lg-4*3</code></li>
<li>按下 tab 後便會出現</li>
<li><img src="https://i.imgur.com/PP9vdmr.png" alt="Emmet"></li>
</ol>
<p>若你發現按下 tab 後竟然沒有用，記得確定自己是不是在 html 文件內。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">view --&#x26;gt; syntax --&#x26;gt; HTML(5)</code></pre></div>
<p>在 HTML5 的文件下，<code>!+tab</code> 會有出現 HTML5 的 snippet 出現，非常好用！</p>
<h4>三、Pretty Json</h4>
<p>有利用到 JSON 的人，想必一定會為了格式上面的問題而煩惱，只要裝上這個，JSON 立刻變得很好看。</p>
<p>裝完之後，把你要修改的 JSON 選取起來，按下快捷鍵</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">cmd+ctrl+j</code></pre></div>
<p>立刻就可以把 JSON 變得很漂亮，也可以自行進去定義縮排大小。</p>
<h4>四、flat theme</h4>
<p><img src="https://i.imgur.com/pvxRMlX.png" alt="flatland"></p>
<p>其實這個套件全名是 flatland 才對，可以把 Sublime Text 2 的整體環境變得扁平化。</p>
<p>安裝方法：</p>
<ol>
<li>打開 Package Control</li>
<li>輸入 Theme - Flatland 即可</li>
</ol>
<hr>
<p>以上介紹了一些我常用的 Sublime Text 2 套件，但一直沒有找到好看的主題，如果你有推薦的主題，非常歡迎交流！</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[wordpress解決permalink固定網址問題]]></title>
        <id>https://code.kpman.cc/2013/08/22/wordpress%E8%A7%A3%E6%B1%BApermalink%E5%9B%BA%E5%AE%9A%E7%B6%B2%E5%9D%80%E5%95%8F%E9%A1%8C/</id>
        <link href="https://code.kpman.cc/2013/08/22/wordpress%E8%A7%A3%E6%B1%BApermalink%E5%9B%BA%E5%AE%9A%E7%B6%B2%E5%9D%80%E5%95%8F%E9%A1%8C/"/>
        <updated>2013-08-22T12:54:15.000Z</updated>
        <summary type="html"><![CDATA[本 case 為希望主目錄可以直接連到 wordpress，但是 wordpress 是另外放在一個資料夾。

```
主目錄：/var/www
wordpress資料夾：/var/www/blog
```]]></summary>
        <content type="html"><![CDATA[<p>本 case 為希望主目錄可以直接連到 wordpress，但是 wordpress 是另外放在一個資料夾。</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">主目錄：/var/www
wordpress資料夾：/var/www/blog</code></pre></div>
<!-- more -->
<h2>一、.htaccess</h2>
<p>wordpress 會利用.htaccess 去更改固定連結，是位在根目錄，也就是<code>/var/www</code>底下，wordpress 會根據你的<code>網站位置URL</code>去設定.htaccess</p>
<p>利用終端機產生.htaccess</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">vi .htaccess
chmod 777 .htaccess</code></pre></div>
<h2>二、進入後台設定固定網址 permalink</h2>
<p>這邊我選擇文章名稱的格式</p>
<p><img src="https://i.imgur.com/XlEgUdT.png" alt="固定網址"></p>
<p>因為剛剛上面有設定.htaccess 權限打開到最大，因此進後台設定完，記得把 chmod 改為 644，要注意安全性。</p>
<h2>三、設定 mod_write</h2>
<p>我的 wordpress 是架在 Amazon EC2 上的 ubuntu，server 是 apache2，因此上網搜尋相關資料，解決辦法如下：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">sudo a2enmod rewrite
sudo /etc/init.d/apache2 restart</code></pre></div>
<p>只要兩行就可以解決!</p>
<h3><strong><em>後記</em></strong></h3>
<p>在解決這個問題的時候，找了很多資料，一來是不明白.htacces 真正的目錄，二來是不知道 ubuntu 的 rewrite 要打開，因此在這邊記錄下來，讓有相同困擾的人可以了解。</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[EC2利用tasksel架wordpress經驗分享]]></title>
        <id>https://code.kpman.cc/2013/08/21/ec2%E5%88%A9%E7%94%A8tasksel%E6%9E%B6wordpress%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/</id>
        <link href="https://code.kpman.cc/2013/08/21/ec2%E5%88%A9%E7%94%A8tasksel%E6%9E%B6wordpress%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB/"/>
        <updated>2013-08-21T02:17:04.000Z</updated>
        <summary type="html"><![CDATA[看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台 Amazon EC2 server，目的是想要練習把 wordpress 架到 EC2 上，在此分享我的架設經驗。]]></summary>
        <content type="html"><![CDATA[<p>看了這麼久的雲端資源，總算開了算是自己真正學到東西的第一台 Amazon EC2 server，目的是想要練習把 wordpress 架到 EC2 上，在此分享我的架設經驗。</p>
<p><img src="https://www.programmableweb.com/wp-content/amazon-web-services1.png" alt="Amazon web service"></p>
<!-- more -->
<h2>一、擁有 AWS 帳號</h2>
<p>關於開啟 AWS 的過程，實際走過一遍之後，阿正老師的<a href="http://blog.soft.idv.tw/?p=823&#x26;page=2">這篇</a>，其內寫的不錯，推薦跟著走一遍，就會了解很多。</p>
<h2>二、開啟自己的 instance</h2>
<p>在實際走過後，會發現阿正老師<a href="http://blog.soft.idv.tw/?p=824">這篇</a>真的超用心，因此接下來主要會利用這篇，再加上些我的補充。</p>
<ul>
<li>instance 地理位置</li>
</ul>
<p>提到將主機開的位置，現在已經有 tokyo 的據點，離台灣更近，所以建議將 instance 位置設在 tokyo</p>
<blockquote>
<p>建議將 instance 位置設在 tokyo</p>
</blockquote>
<ul>
<li>instance 選擇方案</li>
</ul>
<p><img src="https://i.imgur.com/U4rs7wk.png" alt="EC2 ubuntu server for free"></p>
<p>利用 VISA 卡，選擇免費方案（圖中有星星的都是免費方案），在這邊我選擇 ubuntu 來做為我的系統。</p>
<ul>
<li>key pair 創建＆下載</li>
</ul>
<p>在阿正老師的文章內看到關於 key pair 介紹，很重要，一定要記住要把下載下來的 pem 給管理好，未來是需要利用它來做 ssh 登入主機。</p>
<blockquote>
<p>.pem 檔需要存好，一台主機配對一個 key pair，且不能做更改，</p>
</blockquote>
<h2>三、設定 Security Group</h2>
<p>在沒有設定 security group 的時候，新開的 instance 可能是鎖起來的，會有 SSH 連線上的問題。</p>
<ol>
<li>進入 console.aws.amazon.com</li>
<li>左方導覽列選擇 security group</li>
<li>選擇 instance 後，下方的 tab 選取<code>Inbound</code></li>
<li>分別加入<code>SSH</code>&#x26;<code>HTTP</code>，Source 部分都維持 0.0.0.0/0 即可，加入後記得要按<code>Apply Rule Change</code>才生效</li>
</ol>
<blockquote>
<p>記得開啟 SSH(20)、HTTP(80)</p>
</blockquote>
<h2>四、申請 Elastic IP</h2>
<p>每一個 instance 都應該要綁定一個 elastice ip，未來可以作為連線使用。</p>
<ol>
<li>同上，進入 console.aws.amazon.com</li>
<li>選擇 Elastic IPs</li>
<li>選擇 Allocate New Address</li>
<li>申請完之後記得要 associate 到你的 instance</li>
</ol>
<blockquote>
<p>申請完 elastic ip 後，原本的 Public domain 前半部分會改變為新的 ip</p>
</blockquote>
<p>*<strong>_ 其實我在實作時，是先做了 SSH 連線，後來在去申請 elastic ip，結果 associate 完後，我又要 ssh 連線，發現沒有辦法登入，之後才瞭解是做了 elastic ip 後，連線的 ip 也需要一並跟著改變。_</strong></p>
<h2>五、SSH 連線進入自己的 instance</h2>
<ol>
<li>打開終端機（推薦 iterm）</li>
<li><code>chmod 600 ~/.pem</code><br>
要記得把.pem 檔改權限，不然會登不進去</li>
<li>ssh 連線使用以下 command line<br>
<code>ssh -i ~/.pem ubuntu@ip</code>
_ <code>~/.pem</code>是此 instance 的 key pair .pem 檔的路徑
_ <code>ubuntu</code>是因為我用 ubuntu 當做 OS，如果當初選擇 Amazon linux 的話，則需要輸入<code>ec2-user</code>取代 ubuntu * <code>ip</code>則為 instance 的 ip，進到 console，左側選 instance，拉到底下看見<br>
<code>Public DNS: ec2-xx-xxx-xxx-xx.ap-northeast-1.compute.amazonaws.com</code><br>
則 xx-xxx-xxx-xx 改成<code>xx.xxx.xxx.xx</code>即為你的連線 ip</li>
<li>連線成功會看到<code>ubuntu@ip-xxx-xxx-xxx-xxx:~$</code>字眼！那就恭喜了！</li>
</ol>
<blockquote>
<p>pem 檔的權限要更改為 600</p>
</blockquote>
<h2>六、環境設定</h2>
<p>剛進到 instance，記得將環境設定一下</p>
<ol>
<li><code>sudo apt-get update</code> + <code>sudo apt-get upgrade</code></li>
<li>如果覺得一直 sudo 很麻煩，可以利用<code>sudo su</code>取得 root 權限</li>
</ol>
<hr>
<h3># 安裝 tasksel</h3>
<ol>
<li>是 ubuntu 底下的 lamp 懶人包</li>
<li>推薦<a href="http://howtounix.info/howto/LAMP-on-Ubuntu-with-tasksel-tool">教學文</a></li>
<li>開始安裝 taskel <code>sudo apt-get install tasksel</code></li>
<li>安裝 lamp-server <code>sudo tasksel install lamp-server</code></li>
</ol>
<h3># 安裝 phpmyadmin</h3>
<ol>
<li><code>sudo apt-get install phpmyadmin</code></li>
<li><a href="http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin">reference</a></li>
</ol>
<h3># 安裝 wordpress</h3>
<p><img src="http://wow-wp.org/wp-content/uploads/2011/10/wordpress.png" alt="wordpress"></p>
<ol>
<li><a href="https://www.digitalocean.com/community/articles/how-to-install-wordpress-on-ubuntu-12-04">超棒教學文</a> 我是跟著文章走，裡面紅色的字記得改成自己的</li>
</ol>
<ul>
<li>cd /var/www</li>
<li>下載 wordpress 包<br>
<code>wget http://wordpress.org/latest.tar.gz</code></li>
<li>解壓縮<br>
<code>tar -xzvf latest.tar.gz</code></li>
<li>進到 mysql mode<br>
<code>mysql -u root -p</code></li>
<li>剩下有紅字，推薦看連結 XD</li>
</ul>
<h2>七、測試連線</h2>
<p>當你安裝完後，事實上可以利用 public domain 來連線看看<br>
直接在 console 裡面找到 instance 的 public domian，連線看看是否成功</p>
<ol>
<li><code>cd /var/www</code></li>
<li><code>sudo vi test.php</code> 創新 php 檔案，並進到 vim 模式</li>
<li>按<code>i</code> 進入編輯模式，記得看下面是否出現<code>-- INSERT --</code></li>
<li>打上這一行<code>&#x3C;?php phpinfo(); ?></code></li>
<li>按下 esc -> 打入<code>:wq</code> -> enter 存檔(記得是看 iterm 下面)</li>
<li>利用 public domain/test.php 連線測試，看到 php 的資訊就成功了！</li>
<li>public domain/wordpress 也可以看見你的 wordpress 有沒有架成功！</li>
</ol>
<h2>IP 連接 instance</h2>
<p>如果你有自己的 ip，想要指到 EC2 的話，按照下面作法。</p>
<ol>
<li>到 godday 的 DNS manager</li>
</ol>
<ul>
<li>設定你的 IP 的<code>A record</code></li>
<li>指向 instance 的<code>Elastic IP</code>即可</li>
</ul>
<p><strong><em>reference</em></strong></p>
<ul>
<li><a href="http://blog.soft.idv.tw/?p=823&#x26;page=2">阿正老師上篇</a> 阿正老師這兩篇必讀</li>
<li><a href="http://blog.soft.idv.tw/?p=824">阿正老師下篇</a> 主機實戰篇</li>
<li><a href="http://blog.rx836.tw/blog/first-amazon-web-services/">免費玩 Amazon Web Service(AWS) EC2</a> 開機器寫的很詳細，圖文並茂</li>
<li><a href="http://coenraets.org/blog/2012/01/setting-up-wordpress-on-amazon-ec2-in-5-minutes/">Setting Up WordPress on Amazon EC2 in 5 minutes</a> 根本神教學，我是受這篇感動才想要把自己的過程給記錄下來。</li>
<li><a href="http://linadonis.pixnet.net/blog/post/27585552-ubuntu-server-%E5%AE%89%E8%A3%9D-phpmyadmin">Ubuntu Server 安裝 Phpmyadmin</a> phpmyadmin 圖文教學</li>
<li><a href="http://codex.wordpress.org/Giving_WordPress_Its_Own_Directory">Giving WordPress Its Own Directory</a> 更換 wordpress 的路徑位置指向</li>
</ul>
<blockquote>
<p>如果有問題，或者我有寫錯的地方，歡迎留言讓我知道！</p>
</blockquote>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sublime Text 2 實用技巧]]></title>
        <id>https://code.kpman.cc/2013/06/05/sublime-text-2-%E5%AF%A6%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
        <link href="https://code.kpman.cc/2013/06/05/sublime-text-2-%E5%AF%A6%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
        <updated>2013-06-05T12:53:10.000Z</updated>
        <summary type="html"><![CDATA[Sublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/f5ZJthW.png" alt="Sublime Text 2" title="Sublime Text 2"></p>
<p>Sublime Text 2 是一套越來越火紅的編輯器，如果你是接觸網頁開發，想必對於這套軟體不陌生，以下分享幾個好用的技巧，都是我自己平常比較常使用的技巧，因為我本身是一個懶得看文件的人，所以就整理這篇與大家分享。</p>
<!-- more -->
<h2>編輯環境</h2>
<ol>
<li>Mac 10.7.5</li>
<li>Sublime Text 2</li>
</ol>
<p>我是使用 mac，所以快捷鍵就會是 command 的配置。</p>
<h2>技巧介紹</h2>
<h3>一、Set Syntax</h3>
<p>有發現你的 Sublime Text 2 右下角有你正在編輯的環境語言嗎？舉凡 JAVA、CSS、HTML5 等<br>
比如說我現在要從 HTML5 切到 CSS 介面，除了由上方的 View->Sytax 切換外，可以利用快捷鍵</p>
<p>切換到 CSS 範例：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">shift+command+p
鍵入sscss</code></pre></div>
<p><img src="https://i.imgur.com/51PUAhD.png" alt="Set Syntax" title="Set Syntax"></p>
<p>每一個 Color Scheme 都會針對不同的語言去做優化，因此值得學習。</p>
<h3>二、HTML5 snippet</h3>
<p>貼心的 Sublime Text 2 有內建 HTML5 的 snippet，方法如下：</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">! + tab</code></pre></div>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">html:5 + tab</code></pre></div>
<p>都可以達成 HTML5 快速生成已經預定的 snippet.</p>
<p><img src="https://i.imgur.com/grLplgD.png" alt=""></p>
<h3>三、Multiple Selection 同時多個游標</h3>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">按住command+點選你要的位置</code></pre></div>
<p>推薦用在處理 Array 等結構重複性高的資料型態。</p>
<h3>四、Column Selection 同時直行游標</h3>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">按住option+按著滑鼠左鍵直行往下拖曳選取</code></pre></div>
<p>推薦用在處理 html 等修改固定 class 或其他部分。</p>
<p><img src="https://i.imgur.com/1kLSh2P.png" alt=""></p>
<h3>五、選取引號內字串</h3>
<p>通常你都怎樣選取雙引號內的字串呢？<code>"string"</code>利用滑鼠從第一個引號拉到後面那個。</p>
<p>輸入：<code>command + d</code> 即可完成</p>
<h3>六、分割畫面</h3>
<p>有時候我時常左邊放 HTML 檔，右邊放 SCSS 檔，一邊看一邊編輯，這時候就要分割畫面。</p>
<p>輸入：<code>command+option+數量</code></p>
<p>就可以把視窗分割成你要的數量。</p>
<h3>七、貼上符合縮排</h3>
<p>有時候從網站上複製一段 code，常常貼上的部份本身就有縮排，貼完卻只有第一行有縮排，其他跑到前面。</p>
<p>複製完後，輸入：<code>shift+command+v</code></p>
<p>也就是在原本的貼上加上 shift 就可以解決！</p>
<h3><em>reference</em></h3>
<ol>
<li><a href="http://www.youtube.com/watch?v=41nY3RLBy3w&#x26;list=PL8dIIwCMF-SOaSb3_VYUlyULpPyk7iwlh&#x26;index=1">up chen in 2013 JSDC</a></li>
<li><a href="https://gist.github.com/twosixcode/1988097">Paste and Indent</a></li>
</ol>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2013 JSDC所見聞]]></title>
        <id>https://code.kpman.cc/2013/05/20/2013-jsdc%E6%89%80%E8%A6%8B%E8%81%9E/</id>
        <link href="https://code.kpman.cc/2013/05/20/2013-jsdc%E6%89%80%E8%A6%8B%E8%81%9E/"/>
        <updated>2013-05-20T10:57:19.000Z</updated>
        <summary type="html"><![CDATA[這是第二屆的 JSDC，由 TonyQ 及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！]]></summary>
        <content type="html"><![CDATA[<p><img src="https://i.imgur.com/02RzVQA.png" alt="JSDC"></p>
<p>這是第二屆的 JSDC，由 TonyQ 及三大社群舉辦的聚會，非常幸運的我能順利的利用社群票的機制搶到票，在眾多非常有經驗的強者面前，聽完他們的分享，越感覺自己對於網頁開發充滿了熱情！</p>
<!-- more -->
<blockquote>
<p>『我們不叫前端工程師，以後請叫我們<em>前端設計師</em>！』</p>
</blockquote>
<p>這是聽完今年的 JSDC 感覺最有趣的一句話了。這句話帶出了他們的幽默風趣，在 Web Develope 這一個圈子，能結合設計還有程式的，就是前端工程師，也就是所謂的 F2E。</p>
<p>雖然對於網頁開發我自己算是沒有什麼經驗，要談設計我也沒有什麼基礎知識，但我知道這條路是我喜歡的，我會繼續走下去。給自己的目標是十年，我希望十年後我能跟現在我敬佩的前輩們一起討論，一起努力。</p>
<h2>議程記錄＆見聞</h2>
<h3>Day1</h3>
<ul>
<li>
<p>【AWS】介紹了他們的服務現在已經針對 node.js 有放出 SDK - 有用過的人歡迎一起分享討論。</p>
</li>
<li>
<p>【<a href="http://www.slideshare.net/WillHuangTW/java-script-jsdc2013">保哥</a>】介紹了他的開發經驗，針對 code 要怎樣去調教，他說了一句話讓我印象深刻：</p>
</li>
</ul>
<blockquote>
<p>通常你的網站會慢，第一個要查的就是你自己所寫的 code，不是你套用的那些 framework。</p>
</blockquote>
<p>保哥也推薦利用<a href="jsperf.com">jsperf.com</a>去測試自己的 code，雖然執行上面的效果一模一樣，有可能只差一個<code>new</code>效率就差了 200 倍之多。</p>
<ul>
<li>【<a href="https://speakerdeck.com/linyiru/ai-liao-li-wang-zhan-qian-duan-kai-fa-jing-yan-tan">Lawrence</a>】同樣待過資種的 Lawrence 學長介紹了愛料理的開發，主要是一些用過的套件還有經驗談，舉凡 Bootstrap、Font Awesome、template 利用 Handlebars 去完成等。利用 Crazyegg、GA 去分析，也談到了 RWD 的問題。最後三句話，始終在腦海中揮之不去。</li>
</ul>
<blockquote>
<p>在技術上有卓越表現，是工程師的浪漫。<br>
在設計上有卓越表現，是設計師的浪漫。<br>
在產品上有卓越表現，是企劃與 PM 的浪漫。</p>
</blockquote>
<ul>
<li>
<p>【<a href="https://speakerdeck.com/evenwu/ru-he-jiao-she-ji-shi-qian-duan-ji-shu">Even Wu</a>】Even 介紹到了如何教前端技術，投影片的風格太有趣 XD 聊到了教設計師寫 code 其實要讓他們自動自發的學習，也是一個最重要的觀念：激勵。這個議程談的不是技術，而是一種經驗和體悟。<br>
最後剩下的時間，大家交流的問題也很有趣。就有某設計師提到：他原本是設計師，但他每次提出的效果，前端工程師都跟他說這做不出來，他為了證明做的到，便開始自動自發的學習寫 code，來向前端工程師證明。</p>
</li>
<li>
<p>【<a href="https://speakerdeck.com/wallat/gong-cheng-shi-tao-sheng-huo-gong-ju-jie-shao-zuo-geng-kuai-dian">up chen</a>】介紹了很多實用的工具，但可能我自己本身就是一個很偷懶的人，（偷懶的人都會想要去找一些好用的工具讓自己做事更快）所以覺得這一個議程沒有得到很多新知。<br>
但像是 sublime text 的 column selection 便是之前沒有在使用，但是覺得對自己很方便的技巧:)</p>
</li>
<li>
<p>【Rex Huang】這個主題很酷，在瀏覽器上面建立一個 os，而且執行起來很順，重點是利用 js 去打造的，同時也是大會的贊助商，未來應該很有發展，但是對於現階段的我來說比較艱深，所以就沒有很仔細的記錄筆記。</p>
</li>
<li>
<p>【KKBOX】kkbox 來談談利用 node.js 開發的心得。介紹了一些 node 的用法還有經驗，但這種議程最難過的就是自己對於 node.js 接觸還沒有很深，所以聽起來會有點懵懵懂懂，印象最深刻的就是這句話：</p>
</li>
</ul>
<blockquote>
<p>利用 JavaScript 去寫後台聽起來很酷，但做起來會想要哭。</p>
</blockquote>
<ul>
<li>【Ruben Tan】是一個聲音很好聽的英文場議程。講者提到了 flow control 問題，要避免寫太多 call back 才是，single thread 一直是 node.js 開發的問題。</li>
</ul>
<h3>Day 2</h3>
<p><img src="https://i.imgur.com/8N7fGlU.png" alt="picture from Josephj" title="F2E is Keystone"></p>
<ul>
<li>【<a href="https://speakerdeck.com/josephj/f2e-the-keystone">Josephj(啊嗚)</a>】早在 JSDC 開始前，就在網路上得知該前輩維護的<a href="http://f2eclass.com">資源</a>，對於網頁開發，他待過 yahoo!，從 IE4 開始就寫前台了！投影片上面也列出好幾位很值得學習的前輩，真是看的我心花怒放 XD<br>
前端魂，是身為前端工程師（設計師？）應該有的精神！</li>
</ul>
<blockquote>
<p>前端，你的名字叫熱血</p>
</blockquote>
<p>前輩也提到，技術不是重點，態度才是，避免盲目的追求技術，好的前端不等於知道很多技術。積極分享、多回饋，這點我真的在 Josephj 身上看到，從他架設的 f2eclass 就可以知道他願意分享的態度。</p>
<ul>
<li>
<p>【<a href="http://jsdc.york.tw:3939/">york</a>】這是一場非常酷的 live demo，台上講者的投影片，透過連線到 jsdc.york.tw 可以即時的在自己電腦切換，且下方就 demo 了 socket.io 的實作。雖然自己還沒有接觸到這一塊，但知道 socket.io 是利用 websocket 去做，在沒有實作 websocket 的瀏覽器，會切換別的通道，讓他們也可以 work，所以支援的瀏覽器很廣。</p>
</li>
<li>
<p>【<a href="https://speakerdeck.com/jaceju/understanding-the-mvc-mvp-mvvm-in-javascript">大澤木小鐵</a>】小鐵與我們分享了在 JavaScript 上面實作 MVC、MVP、MVVM（簡稱 MV*）的心法，這場我聽的津津有味！利用圖解的方式搭配很多時事梗 XD 重點是讓沒什麼經驗的我也可以略懂，相信未來在開發 JS 的時候，會再想到這一份投影片。</p>
</li>
<li>
<p>【<a href="https://speakerdeck.com/othree/this">othree</a>】othree 和我們分享了 this 的用法。在不同情況呼叫 this 的時候，他針對的 function 以及目標會不同。然而我覺得這對我來說也還是太深了 XD 開發的經驗還是不太足夠，但這一個主題應該是很多有經驗的前輩們都想要討論的問題，期待自己能好好的加強自己，等到我也遇到 this 的問題，我相信我又更加進步了。</p>
</li>
<li>
<p>【<a href="http://www.slideshare.net/lis186/20130519-sketching-with-codejsdc2013">阿修(Justin Lee)</a>】阿修介紹到了在與設計溝通的時候，其實為了記錄當下討論的結果，利用 inline 把效果寫進 html 最快，等到往後要維護的時候，工程師在自己去 maintain，著實讓我上了一課。阿修也示範了一套很酷的 Titanium，可以即時的在 web 編輯 app 程式，然後利用手機即時連線，為了加速效果，也利用了<a href="https://github.com/dbankier/TiShadow">Tishaow</a>去 built，存檔的同時就可以即時看到，效率非常高。</p>
</li>
<li>
<p>【Mozilla】介紹了利用 Emscripten 去把不同的語言編譯成 JavaScript，可以在瀏覽器上面運行這樣。</p>
</li>
<li>
<p>【<a href="http://www.slideshare.net/nowill/rwd-21436569">Nowill</a>】Nowill 介紹了 RWD 的一些想法，她是一個非常有經驗的前輩，參與很多專案，與很多公司有很多合作經驗。她說了，RWD 不是口頭上說說就是用 media query 就可以解決的，還有很多技巧是要自己真的去做過才會知道的。提到了五大秘訣：掌握解析度、流動式布局、使用者經驗、體驗操作、推敲思考。且她也提到，不是每一個網站都適合作 RWD，因為在需要圖片解析度，文字閱讀的網站，應該針對不同的 case 去做因應。</p>
</li>
</ul>
<h2>心得</h2>
<p>參與了本次的 JSDC，我體會到了那些專注於在一件事情上面的美好，那種熱忱，都是在這些前輩們上面可以看到。前端工程師要做的事情，會一點設計，會知道要怎樣寫程式，其實就是將這世界上美的事物，利用 web 的方式讓大家看的見。<br>
我相信分享是這世界上最美好的事情，聽到許多前輩的分享，我自己會有一種想要讓自己變很強的衝動，但有時候會忘記那些最單純的人際關係。在周遭一些朋友身上，我看見了他們很強，很厲害，讓我打從心底佩服；但不知道為什麼，對於他們我會有一種不太想向他們請教的感覺，或許是他們平時透露出來的訊息吧，讓我感覺不是那麼好。<br>
我認為交流是一件很愉悅的事情，可以讓彼此在短時間就可以學習到很多，因此我很樂意分享，把自己知道不多但覺得實用的東西給記錄下來，期許大家可以開心的交流，開心的分享，而並非是那種『我知道這個很好用，但你沒有問，你沒有一起來討論，所以我不想告訴你。』提醒自己，要當一個樂意分享的人，在前端開發這一塊，我又重新充滿電了！</p>
<blockquote>
<p>在變強之前，我想要先變好:)</p>
</blockquote>
<h3><em>reference</em></h3>
<ul>
<li><a href="http://hackfoldr.org/#/jsdctw2013/1xcPi6UutDHCKjgoYH4yUJxQ_728E2VO3og1e3Eq0OtE">JSDC 懶人包</a></li>
<li><a href="https://docs.google.com/spreadsheet/ccc?key=0AqMUl4JFkRfldEVuNDBkNUNsSlZEbDBFXzYzdTloUkE#gid=0">JSDC 議程 slide 整理</a> - 這份很完整</li>
<li><a href="http://f2eclass.com">f2eclass</a></li>
<li><a href="http://blog.darkthread.net/">黑暗執行緒</a></li>
<li><a href="http://blog.wu-boy.com/">小惡魔 apple boy</a></li>
</ul>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[建立自己的GitHub Project Pages]]></title>
        <id>https://code.kpman.cc/2013/05/18/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84github-project-pages/</id>
        <link href="https://code.kpman.cc/2013/05/18/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84github-project-pages/"/>
        <updated>2013-05-18T00:04:03.000Z</updated>
        <summary type="html"><![CDATA[在 GitHub 使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到 GitHub 上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用 GitHub Pages 來做到。]]></summary>
        <content type="html"><![CDATA[<p>在 GitHub 使用上，我算是初新者，有疑問才有進步。每當看到有人把好玩的東西放到 GitHub 上面變成靜態頁面，都會很想知道他是怎樣辦到的。結果不難，就是利用 GitHub Pages 來做到。</p>
<!-- more -->
<h2>GitHub Pages 介紹</h2>
<p>當你要有一個自己的 GitHub Pages，其實分成兩項。</p>
<ol>
<li>repo 的名字為<code>yourname.github.com</code>，則會產生的 page 路徑為 <code>yourname.github.io</code>。<a href="http://kpman.github.io">本部落格</a>是建立在 github 上面，就是利用這一個 GitHub Pages 模式去建立，可以參考<a href="http://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/">hexo 架 blog 初體驗</a>、<a href="http://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/">建立自己 blog 的 subdomain</a>這兩篇文章。</li>
<li>repo 的名字為<code>repo-name</code>，則會產生的 page 路徑為 <code>yourname.github.io/repo-name</code>，這邊的 repo name 就不像第一種模式，沒有固定名稱。</li>
</ol>
<h2>GitHub Pages 建立</h2>
<p>在每一個新的 repo 下面，正常的情況都是在 mater 這一個 branch。分享一下我自己的作法。</p>
<ol>
<li>GitHub 頁面上建立一個新的 repo，這邊我取名為 first-repo。</li>
</ol>
<p><img src="https://i.imgur.com/6mFqQlc.png" alt="create new repo" title="new repo"></p>
<ol start="2">
<li>從本機端 clone 下來，參照自己的路徑，我的 repo 則是在 command line 底下打</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">git clone git@github.com:kpman/first-repo.git</code></pre></div>
<ol start="3">
<li>移到該資料夾</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">cd first-repo</code></pre></div>
<ol start="4">
<li>將 branch 移到<code>gh-pages</code>，這步驟很重要，Github Pages 就是看這一個 branch 去決定頁面的。</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">git branch gh-pages
git checkout gh-pages</code></pre></div>
<p>或者</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">git checkout --orphan gh-pages //建立一個沒有parent的branch，並移到該branch上</code></pre></div>
<ol start="5">
<li>將編輯好的檔案 push 上去。</li>
</ol>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">git add .
git commit
git push origin gh-pages</code></pre></div>
<ol start="6">
<li>完成！</li>
</ol>
<h2>路徑差異</h2>
<p><a href="http://github.com/kpman/liteAccordion">http://github.com/kpman/liteAccordion</a>這樣代表連回 GitHub 的 code 頁面<br>
<a href="http://kpman.github.io/liteAccordion">http://kpman.github.io/liteAccordion</a>因為新增到<code>gh-pages</code>這一個 branch，所以可以看到靜態的 html 展示頁面。</p>
<p>其他範例<br>
<a href="http://jonobr1.github.io/two.js/">two.js</a><br>
<a href="http://jschr.github.io/textillate/">textillate</a></p>
<h3><em>reference</em></h3>
<ol>
<li><a href="https://help.github.com/articles/creating-project-pages-manually">官方文件</a></li>
<li><a href="http://xlson.com/2010/11/09/getting-started-with-github-pages.html">Getting started with GitHub Pages</a></li>
<li><a href="https://github.com/Kunena/Kunena-Forum/wiki/Create-a-new-branch-with-git-and-manage-branches">Create a new branch with git and manage branches</a></li>
</ol>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[在hexo自訂rss]]></title>
        <id>https://code.kpman.cc/2013/05/08/%E5%9C%A8hexo%E8%87%AA%E8%A8%82rss/</id>
        <link href="https://code.kpman.cc/2013/05/08/%E5%9C%A8hexo%E8%87%AA%E8%A8%82rss/"/>
        <updated>2013-05-08T15:50:06.000Z</updated>
        <summary type="html"><![CDATA[趁著好朋友在旁邊的情況下，請教他學會了在 hexo 自訂 rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。]]></summary>
        <content type="html"><![CDATA[<p>趁著好朋友在旁邊的情況下，請教他學會了在 hexo 自訂 rss，再次感受到技術這種東西，真的是當面交流才會發揮他的效益。</p>
<!-- more -->
<h3>一、本機環境</h3>
<p>在終端機下輸入以下</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed --save
</code></pre></div>
<p>權限沒有取得的記得前面加上<code>sudo</code>。</p>
<h3>二、修改_config.yml</h3>
<p>在主目錄底下的<code>_config.yml</code>檔加上</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">plugins</span><span class="token punctuation">:</span>
  <span class="token punctuation">-</span> hexo<span class="token punctuation">-</span>generator<span class="token punctuation">-</span>feed
</code></pre></div>
<p><img src="https://i.imgur.com/w39zkK6.png" alt="modify _config.yml" title="modify _config.yml"></p>
<p>如此一來便完成了環境設置。</p>
<h3>三、要怎樣找到？</h3>
<p>在 hexo generate 之後，會發現 public 資料夾底下多了 atom.xml<br>
在<a href="http://www.feedly.com/">feedly</a>這類的閱讀收集器<br>
只要輸入<code>domain/atom</code>就可以找到<br>
例如要訂閱我的 blog 只要輸入<code>code.kpman.cc/atom</code>就可以搜尋到囉！</p>
<p><img src="https://i.imgur.com/Hk12y1N.png" alt="rss" title="feedly rss search"></p>
<p>突然發現我的 blog 只有一個人訂閱，那個人就是我自己...</p>
<h3><em>reference</em></h3>
<ol>
<li><a href="https://github.com/tommy351/hexo/wiki/Plugins">hexo plugins</a></li>
<li><a href="http://michaelhsu.tw/2013/05/05/rssatom-sitemap-for-seo/">RSS/Atom、Sitemap for SEO</a></li>
</ol>
<p>感謝強者阿志耐心面授機宜:)</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[利用pseudo element 讓html更簡潔]]></title>
        <id>https://code.kpman.cc/2013/05/07/%E5%88%A9%E7%94%A8-pseudo-element-%E8%AE%93-html-%E6%9B%B4%E7%B0%A1%E6%BD%94/</id>
        <link href="https://code.kpman.cc/2013/05/07/%E5%88%A9%E7%94%A8-pseudo-element-%E8%AE%93-html-%E6%9B%B4%E7%B0%A1%E6%BD%94/"/>
        <updated>2013-05-07T11:28:16.000Z</updated>
        <summary type="html"><![CDATA[趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的 html 架構更加簡潔的方法。]]></summary>
        <content type="html"><![CDATA[<p>趁著記憶猶新的狀況，記錄自己使用偽元素 (pseudo-element)讓原本的 html 架構更加簡潔的方法。</p>
<!-- more -->
<h2>何謂 pseudo-element?</h2>
<p>不會出現在 html 的文件裡面，而是利用 css 讓瀏覽器去實作。以下列出的都是可以使用的 pseudo-element。</p>
<ol>
<li>::first-line：若是 p 元素，則可以用來操作第一行。</li>
<li>::first-letter：用來操作第一個字。</li>
<li>::before：可以在所選元素之前插入樣式/內容。</li>
<li>::after：同<code>before</code>但是是在之後插入。</li>
<li>::selection：用來自定反白後的效果。</li>
</ol>
<blockquote>
<p>為了區分偽元素和偽類，CSS3 的 guildline 將偽元素的寫法修正，以往只要加一個冒號「:」，現在則是加兩個冒號「::」，部分可支援的瀏覽器包含 webkit, firefox, opera。)
-- by <a href="http://www.mukispace.com/pseudo-elements-10-examples/">MUKI</a></p>
</blockquote>
<h2>修改過程</h2>
<h3>原本的 html code</h3>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>img/icon01.png<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>正確觀念<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>span</span><span class="token punctuation">></span></span>正確觀念<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>span</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-scss"><code class="language-scss"><span class="token selector">.icon </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">em</span><span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span>
  <span class="token selector">span </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">-7</span><span class="token unit">px</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token unit">px</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>原本利用 div > span 的效果去把中文字顯現出來，所以在 html 的架構下，需要多一個<code>span</code>的 tag。<br>
且利用<code>img</code>去把圖片給 show 出來。</p>
<h3>更改過後的 html code</h3>
<div class="remark-highlight"><pre class="language-html"><code class="language-html"><span class="token comment">&#x3C;!-- html只剩一行！--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;</span>div</span> <span class="token attr-name">data-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>正確觀念<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>concept_label icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&#x3C;/</span>div</span><span class="token punctuation">></span></span>
</code></pre></div>
<div class="remark-highlight"><pre class="language-scss"><code class="language-scss"><span class="token selector">.icon </span><span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token unit">em</span><span class="token punctuation">;</span>
  <span class="token property">padding-top</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token unit">px</span><span class="token punctuation">;</span>

  <span class="token selector"><span class="token parent important">&#x26;</span>:before </span><span class="token punctuation">{</span>
    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>
    <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">-7</span><span class="token unit">px</span><span class="token punctuation">;</span>
    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token unit">px</span><span class="token punctuation">;</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token function">attr</span><span class="token punctuation">(</span>data-text<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 關鍵作法</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector">.concept_label </span><span class="token punctuation">{</span>
  <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span>../img/icon01_c.png<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div>
<p>###觀念整理</p>
<ol>
<li>將中文字放入自訂的<code>data-*</code>屬性</li>
<li>CSS 中利用<code>::before</code>取代原本的<code>span</code></li>
<li>利用<code>content: attr(data-text);</code>將 date-text 文字取出來</li>
<li>將背景圖片利用另外一個 class 取代，以後維護性提高。</li>
</ol>
<h3><em>reference</em></h3>
<p><a href="http://www.mukispace.com/pseudo-elements-10-examples/">那些 CSS 偽元素可以幫你做的 10 個效果</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[客製化hexo light theme]]></title>
        <id>https://code.kpman.cc/2013/04/28/%E5%AE%A2%E8%A3%BD%E5%8C%96hexo-light-theme/</id>
        <link href="https://code.kpman.cc/2013/04/28/%E5%AE%A2%E8%A3%BD%E5%8C%96hexo-light-theme/"/>
        <updated>2013-04-28T21:09:37.000Z</updated>
        <summary type="html"><![CDATA[分享一些目前知道的客製化 theme 技巧。  
其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，  
一時間也無法摸透，所以覺得應該值得把它記錄下來。]]></summary>
        <content type="html"><![CDATA[<p>分享一些目前知道的客製化 theme 技巧。<br>
其實非常簡單，但是這些技巧如果沒有問過或是自己看過文件，<br>
一時間也無法摸透，所以覺得應該值得把它記錄下來。</p>
<!-- more -->
<h3>一、增加 Disqus 留言板</h3>
<ul>
<li>到<a href="http://disqus.com/">Disqus</a>申請帳號</li>
<li>右上角的 Dashboard <code>+Add</code> 申請一個新的帳號</li>
<li>將網址、name、shortname 打好後，要把 <code>shortname</code> 記住！
_ 修改本機目錄下的 <code>_confid.yml</code>
_ 在 <code>disqus_shortname</code> 貼上自己的 shortname</li>
</ul>
<p>完成～</p>
<p>※ 後記：<br>
若你在申請完 disqus 貼到自己的 blog 上面，發現出現很多不必要的連結，請到 disqus 的 dashboard 去修改。<br>
右上方 <code>Setting</code> -> <code>Discovery</code> -> 將 Discovery level 拉到最右邊，如下圖<br>
<img src="https://i.imgur.com/eeEjwka.png" alt="Discovery level"></p>
<h3>二、增加右方側欄 widget</h3>
<p>在標題就已經破梗囉 XD<br>
右方出現那些『Tag』『Tag Cloud』等欄位，其實就是修改 widget 過後得到的結果。<br>
方法如下：</p>
<ul>
<li>找到 <code>theme/light/layout/_widget</code> ，可以發現很多 <strong>ejs</strong> 檔</li>
<li>有些是已經自訂好了，例如 <code>category</code> <code>recent_posts</code> 等</li>
<li>在 <code>theme/light/_config.yml</code> 內，修改<strong>widgets</strong>，在底下新增你要的 ejs 檔名即可～</li>
</ul>
<p>同樣方法可以自己寫 ejs 檔，一樣在<code>theme/light/_config.yml</code>加上檔名就可以自訂。</p>
<h3>三、增加上方自訂全域導覽列</h3>
<p>預設為 Home、Archives 這兩個<br>
當然得要自訂才爽 XD</p>
<p>方法一樣很簡單如下：</p>
<ul>
<li>找到<code>theme/light/_config.yml</code>裡面的第一行</li>
<li>預設狀況應該只有 Home&#x26;Archives<br>
<img src="https://i.imgur.com/reKRQw4.png" alt="menu"></li>
<li>自訂自己的 menu，項目後面即為<strong>連結</strong>，可以直接使用<code>http://google.com</code>之類的連結。</li>
</ul>
<h3>四、自訂 favicon</h3>
<ul>
<li>首先你要有一個 favicon.ico 檔或是.png 檔(這邊預設檔名為<code>favicon.png</code>)</li>
<li>將檔案放在 <code>主目錄/source</code> 底下<br>
<img src="https://i.imgur.com/Aar4ap9.png" alt="favicon path"></li>
<li>找到 <code>theme/light/layout/_partial/head.ejs</code>做修改</li>
<li>在裡面加上 head.ejs 檔內確認有以下這行 code 即可擁有自己的 favicon</li>
</ul>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">&#x26;lt;link href=&#x26;quot;&#x26;lt;%- config.root %&#x26;gt;favicon.png&#x26;quot; rel=&#x26;quot;icon&#x26;quot;&#x26;gt;</code></pre></div>
<p>以上介紹一些目前知道的自訂方法，<br>
希望還有人可以跟我多介紹一些技巧，一起分享吧！</p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[建立自己blog的subdomain]]></title>
        <id>https://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/</id>
        <link href="https://code.kpman.cc/2013/04/27/%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1blog%E7%9A%84subdomain/"/>
        <updated>2013-04-27T00:24:36.000Z</updated>
        <summary type="html"><![CDATA[有鑑於 `kpman.github.io` 這一個網址實在太難記了，所以就決定將自己有的 domain 利用 subdomain 的方式指過來。  
以下的介紹是我的個案，我利用 subdomain 而非 TLD 去做。]]></summary>
        <content type="html"><![CDATA[<p>有鑑於 <code>kpman.github.io</code> 這一個網址實在太難記了，所以就決定將自己有的 domain 利用 subdomain 的方式指過來。<br>
以下的介紹是我的個案，我利用 subdomain 而非 TLD 去做。</p>
<!-- more -->
<h2>一、擁有自己的 domain</h2>
<p>雖然像是廢話 XD
但這邊推薦去<a href="www.godaddy.com/">GoDaddy</a>買 domain.<br>
方便又快，在更新 domain 的時間非常快速，理論上一個小時內就可以指到你要的 ip 位置。</p>
<h2>二、到 GoDaddy 設定 subdomain</h2>
<ol>
<li>
<p>進到 DNS manager</p>
</li>
<li>
<p>新增一筆 CNAME</p>
<p><img src="https://i.imgur.com/esdG2wP.png" alt="CNAME"></p>
</li>
<li>
<p>GoDaddy 部分完成</p>
</li>
</ol>
<h2>三、在本機端設置 CNAME 檔</h2>
<p>這邊要在 <code>主目錄-source</code> 底下放一個檔名為 <code>CNAME</code> 的檔案<br>
裡面為你要指向的路徑，這邊我是指向 <code>http://code.kpman.cc</code></p>
<p><img src="https://i.imgur.com/gyMS7U6.png" alt="path"></p>
<p>至於如何設置 CNAME 檔案，我是利用在 github repo 上面的 create new file</p>
<p><img src="https://i.imgur.com/AHcVLBW.png" alt="create new file"></p>
<p>設置完之後 clone 下來，然後複製進去<code>主目錄-source</code> 底下 XD<br>
（有人知道怎樣做比較好嗎？）</p>
<p>理論上這樣子就完成囉！<br>
如果有漏掉的麻煩留言給我一起討論:)</p>
<h3><em>reference</em></h3>
<p><a href="https://help.github.com/articles/setting-up-a-custom-domain-with-pages">官方文件</a></p>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[hexo架blog初體驗]]></title>
        <id>https://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/</id>
        <link href="https://code.kpman.cc/2013/04/26/hexo%E6%9E%B6blog%E5%88%9D%E9%AB%94%E9%A9%97/"/>
        <updated>2013-04-26T22:21:55.000Z</updated>
        <summary type="html"><![CDATA[是這樣的，一直想要找一個空間，可以清爽的放 code，可以跟其他人交流  
有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。

報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個 blog 的過程記錄下來  
謝謝那些願意指導我的朋友們！]]></summary>
        <content type="html"><![CDATA[<p>是這樣的，一直想要找一個空間，可以清爽的放 code，可以跟其他人交流<br>
有鑑於系上好朋友們紛紛都建立起自己的部落格，因此我也加入了這個行列。</p>
<p>報著取之於人，回饋之於人的心情，我想要把自己從無到有架設這一個 blog 的過程記錄下來<br>
謝謝那些願意指導我的朋友們！</p>
<!-- more -->
<h2>一、本機環境設定</h2>
<ol>
<li>
<p>首先你要有 node.js，這是一套快速、簡單且功能強大的 Node.js 網誌框架。</p>
</li>
<li>
<p>接著你要用 <code>npm install -g hexo</code> 來安裝</p>
</li>
</ol>
<p>理論上這樣就完成了，我個人在裝的時候 npm 不給裝，發現前面加上 <code>sudo</code> 就可以解決。</p>
<h2>二、github 帳號設定</h2>
<ol>
<li>
<p>你要申請一個自己的 github 帳號</p>
</li>
<li>
<p>在主頁右上方創建一個新的 repo</p>
<p><img src="https://i.imgur.com/6mFqQlc.png" alt="create new repo" title="new repo"></p>
</li>
<li>
<p>Repository name 填入 <code>github帳號.github.com</code> 用來創建 github page</p>
</li>
</ol>
<h2>三、開始使用 hexo</h2>
<p>建立 hexo</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">hexo init
</code></pre></div>
<p>建立一篇文章，將會是<a href="http://markdown.tw">Markdown</a>形式，可以到 source/_post/title.md 去修改</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">hexo new <span class="token string">"title"</span>
</code></pre></div>
<p>生成 public 檔</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">hexo generate
</code></pre></div>
<p>開啟 server 觀看（預設在 localhost:4000）</p>
<div class="remark-highlight"><pre class="language-shell"><code class="language-shell">hexo server
</code></pre></div>
<h2>四、發佈到 github 上面</h2>
<p>修改 <code>_config.yml</code> 檔案，最下面加上</p>
<div class="remark-highlight"><pre class="language-yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> github
  <span class="token key atrule">repository</span><span class="token punctuation">:</span> git@github.com<span class="token punctuation">:</span>github 帳號/github 帳號.github.com.git
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master
</code></pre></div>
<p>我那時候用 git 的時候，沒有 ssh 認證，如果遇到相同問題可以看<a href="https://help.github.com/articles/generating-ssh-keys">這篇</a>。<br>
照著上面的指令走就可以完成，唯獨 mac 裡面似乎內建 <code>id_rsa</code> 這把 key，這邊我不清楚 XD</p>
<p>接著只要輸入</p>
<div class="remark-highlight"><pre class="language-unknown"><code class="language-unknown">hexo deploy</code></pre></div>
<p>等待 10 分鐘，你的網誌理論上就架好了！網址為 <code>http://github帳號.github.io</code></p>
<h3><em>reference</em></h3>
<ol>
<li>
<p><a href="http://zespia.tw/hexo/zh-TW/">官方文件</a>非常詳盡，重點是<em>中文</em>！</p>
</li>
<li>
<p>強者小熊<a href="http://eva0919.github.io/2013/04/21/%E4%BD%BF%E7%94%A8hexo%E4%BB%A5%E5%8F%8Agithub-page%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E9%83%A8%E8%90%BD%E6%A0%BC/">教學文</a></p>
</li>
</ol>
]]></content>
        <author>
            <name>Daniel Tseng</name>
            <email>s92f002@gmail.com</email>
            <uri>https://code.kpman.cc</uri>
        </author>
    </entry>
</feed>